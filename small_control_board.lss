
small_control_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012c  00800100  00001a3c  00001ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000039b  0080022c  0080022c  00001bfc  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00001c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000041b1  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001eda  00000000  00000000  00006071  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001696  00000000  00000000  00007f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000828  00000000  00000000  000095e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ce8  00000000  00000000  00009e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002019  00000000  00000000  0000aaf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000cb0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      14:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      24:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_12>
      34:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      40:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      48:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__vector_18>
      4c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__vector_19>
      50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      54:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__vector_21>
      58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      68:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      6c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      70:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      74:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      78:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      7c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      80:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__vector_32>
      84:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      88:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      8c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      90:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>

00000094 <__trampolines_end>:
      94:	7e 6e       	ori	r23, 0xEE	; 238
      96:	7f 62       	ori	r23, 0x2F	; 47
      98:	0c 37       	cpi	r16, 0x7C	; 124
      9a:	26 0c       	add	r2, r6
      9c:	37 12       	cpse	r3, r23
      9e:	0c 37       	cpi	r16, 0x7C	; 124
      a0:	0e 0c       	add	r0, r14
      a2:	37 06       	cpc	r3, r23
      a4:	0c 37       	cpi	r16, 0x7C	; 124
      a6:	02 0c       	add	r0, r2
      a8:	37 00       	.word	0x0037	; ????
      aa:	0c 36       	cpi	r16, 0x6C	; 108

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d0 e1       	ldi	r29, 0x10	; 16
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	12 e0       	ldi	r17, 0x02	; 2
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	ec e3       	ldi	r30, 0x3C	; 60
      c0:	fa e1       	ldi	r31, 0x1A	; 26
      c2:	00 e0       	ldi	r16, 0x00	; 0
      c4:	0b bf       	out	0x3b, r16	; 59
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
      c8:	07 90       	elpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	ac 32       	cpi	r26, 0x2C	; 44
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
      d2:	25 e0       	ldi	r18, 0x05	; 5
      d4:	ac e2       	ldi	r26, 0x2C	; 44
      d6:	b2 e0       	ldi	r27, 0x02	; 2
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	a7 3c       	cpi	r26, 0xC7	; 199
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <main>
      e6:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <_exit>

000000ea <__bad_interrupt>:
      ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <__vector_12>:
#include <avr/interrupt.h>
#include <util/atomic.h>

static volatile uint_least64_t timerMillis = 0; 

ISR (TIMER1_COMPA_vect) {
      ee:	1f 92       	push	r1
      f0:	0f 92       	push	r0
      f2:	0f b6       	in	r0, 0x3f	; 63
      f4:	0f 92       	push	r0
      f6:	11 24       	eor	r1, r1
      f8:	2f 93       	push	r18
      fa:	3f 93       	push	r19
      fc:	4f 93       	push	r20
      fe:	5f 93       	push	r21
     100:	6f 93       	push	r22
     102:	7f 93       	push	r23
     104:	8f 93       	push	r24
     106:	9f 93       	push	r25
     108:	af 93       	push	r26
    timerMillis++;
     10a:	20 91 2c 02 	lds	r18, 0x022C
     10e:	30 91 2d 02 	lds	r19, 0x022D
     112:	40 91 2e 02 	lds	r20, 0x022E
     116:	50 91 2f 02 	lds	r21, 0x022F
     11a:	60 91 30 02 	lds	r22, 0x0230
     11e:	70 91 31 02 	lds	r23, 0x0231
     122:	80 91 32 02 	lds	r24, 0x0232
     126:	90 91 33 02 	lds	r25, 0x0233
     12a:	a1 e0       	ldi	r26, 0x01	; 1
     12c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__adddi3_s8>
     130:	20 93 2c 02 	sts	0x022C, r18
     134:	30 93 2d 02 	sts	0x022D, r19
     138:	40 93 2e 02 	sts	0x022E, r20
     13c:	50 93 2f 02 	sts	0x022F, r21
     140:	60 93 30 02 	sts	0x0230, r22
     144:	70 93 31 02 	sts	0x0231, r23
     148:	80 93 32 02 	sts	0x0232, r24
     14c:	90 93 33 02 	sts	0x0233, r25
}
     150:	af 91       	pop	r26
     152:	9f 91       	pop	r25
     154:	8f 91       	pop	r24
     156:	7f 91       	pop	r23
     158:	6f 91       	pop	r22
     15a:	5f 91       	pop	r21
     15c:	4f 91       	pop	r20
     15e:	3f 91       	pop	r19
     160:	2f 91       	pop	r18
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <Utils_Init>:

void Utils_Init(void) {
	// CTC mode, Clock/8
    TCCR1B |= (1 << WGM12) | (1 << CS11);
     16c:	e1 e8       	ldi	r30, 0x81	; 129
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	80 81       	ld	r24, Z
     172:	8a 60       	ori	r24, 0x0A	; 10
     174:	80 83       	st	Z, r24
 
    // Load the high byte, then the low byte
    // into the output compare
    OCR1AH = (CTC_MATCH_OVERFLOW >> 8);
     176:	87 e0       	ldi	r24, 0x07	; 7
     178:	80 93 89 00 	sts	0x0089, r24
    OCR1AL = (uint8_t)CTC_MATCH_OVERFLOW;
     17c:	80 ed       	ldi	r24, 0xD0	; 208
     17e:	80 93 88 00 	sts	0x0088, r24
 
    // Enable the compare match interrupt
    TIMSK1 |= (1 << OCIE1A);
     182:	ef e6       	ldi	r30, 0x6F	; 111
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	80 81       	ld	r24, Z
     188:	82 60       	ori	r24, 0x02	; 2
     18a:	80 83       	st	Z, r24
     18c:	08 95       	ret

0000018e <Utils_Mills>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     18e:	f8 94       	cli
uint64_t Utils_Mills(void) {
	uint64_t ret;

    // Ensure this cannot be disrupted
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
        ret = timerMillis;
     190:	20 91 2c 02 	lds	r18, 0x022C
     194:	30 91 2d 02 	lds	r19, 0x022D
     198:	40 91 2e 02 	lds	r20, 0x022E
     19c:	50 91 2f 02 	lds	r21, 0x022F
     1a0:	60 91 30 02 	lds	r22, 0x0230
     1a4:	70 91 31 02 	lds	r23, 0x0231
     1a8:	80 91 32 02 	lds	r24, 0x0232
     1ac:	90 91 33 02 	lds	r25, 0x0233
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     1b0:	78 94       	sei
    }
    return ret;
}
     1b2:	08 95       	ret

000001b4 <Pin_SetMode>:
#include "Pin.h"


void Pin_SetMode(Pin* pin, PinMode mode) {
     1b4:	fc 01       	movw	r30, r24
     1b6:	46 81       	ldd	r20, Z+6	; 0x06
	if (mode == PIN_INPUT) {
     1b8:	61 11       	cpse	r22, r1
     1ba:	19 c0       	rjmp	.+50     	; 0x1ee <Pin_SetMode+0x3a>
		// Set pull-up resistor
		set_bit(*(pin->PORTx), pin->Pxn);
     1bc:	a2 81       	ldd	r26, Z+2	; 0x02
     1be:	b3 81       	ldd	r27, Z+3	; 0x03
     1c0:	5c 91       	ld	r21, X
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	c9 01       	movw	r24, r18
     1c8:	01 c0       	rjmp	.+2      	; 0x1cc <Pin_SetMode+0x18>
     1ca:	88 0f       	add	r24, r24
     1cc:	4a 95       	dec	r20
     1ce:	ea f7       	brpl	.-6      	; 0x1ca <Pin_SetMode+0x16>
     1d0:	85 2b       	or	r24, r21
     1d2:	8c 93       	st	X, r24

		// Set input pin
		clear_bit(*(pin->DDRx), pin->Pxn);
     1d4:	a0 81       	ld	r26, Z
     1d6:	b1 81       	ldd	r27, Z+1	; 0x01
     1d8:	8c 91       	ld	r24, X
     1da:	06 80       	ldd	r0, Z+6	; 0x06
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <Pin_SetMode+0x2e>
     1de:	22 0f       	add	r18, r18
     1e0:	33 1f       	adc	r19, r19
     1e2:	0a 94       	dec	r0
     1e4:	e2 f7       	brpl	.-8      	; 0x1de <Pin_SetMode+0x2a>
     1e6:	20 95       	com	r18
     1e8:	28 23       	and	r18, r24
     1ea:	2c 93       	st	X, r18
     1ec:	08 95       	ret
	} else {
		set_bit(*(pin->DDRx), pin->Pxn);
     1ee:	01 90       	ld	r0, Z+
     1f0:	f0 81       	ld	r31, Z
     1f2:	e0 2d       	mov	r30, r0
     1f4:	20 81       	ld	r18, Z
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	01 c0       	rjmp	.+2      	; 0x1fe <Pin_SetMode+0x4a>
     1fc:	88 0f       	add	r24, r24
     1fe:	4a 95       	dec	r20
     200:	ea f7       	brpl	.-6      	; 0x1fc <Pin_SetMode+0x48>
     202:	82 2b       	or	r24, r18
     204:	80 83       	st	Z, r24
     206:	08 95       	ret

00000208 <Pin_EnableAnalog>:
	}
}

void Pin_EnableAnalog(Pin* pin, PinFrequency frequency) {
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	dc 01       	movw	r26, r24
	switch (pin->timer->bits) {
     20e:	17 96       	adiw	r26, 0x07	; 7
     210:	ed 91       	ld	r30, X+
     212:	fc 91       	ld	r31, X
     214:	18 97       	sbiw	r26, 0x08	; 8
     216:	87 85       	ldd	r24, Z+15	; 0x0f
     218:	88 30       	cpi	r24, 0x08	; 8
     21a:	21 f0       	breq	.+8      	; 0x224 <Pin_EnableAnalog+0x1c>
     21c:	80 31       	cpi	r24, 0x10	; 16
     21e:	09 f4       	brne	.+2      	; 0x222 <Pin_EnableAnalog+0x1a>
     220:	78 c0       	rjmp	.+240    	; 0x312 <Pin_EnableAnalog+0x10a>
     222:	3c c1       	rjmp	.+632    	; 0x49c <Pin_EnableAnalog+0x294>
		// Configuration for 8bit timers
		case 8:
			switch (frequency) {
     224:	61 30       	cpi	r22, 0x01	; 1
     226:	49 f1       	breq	.+82     	; 0x27a <Pin_EnableAnalog+0x72>
     228:	08 f4       	brcc	.+2      	; 0x22c <Pin_EnableAnalog+0x24>
     22a:	44 c0       	rjmp	.+136    	; 0x2b4 <Pin_EnableAnalog+0xac>
     22c:	63 30       	cpi	r22, 0x03	; 3
     22e:	09 f0       	breq	.+2      	; 0x232 <Pin_EnableAnalog+0x2a>
     230:	35 c1       	rjmp	.+618    	; 0x49c <Pin_EnableAnalog+0x294>
					(1 << pin->timer->COMnA1) |
					(1 << pin->timer->CSn0) |
					(1 << pin->timer->CSn1);
				break;
				case PIN_66KHz:
					*(pin->timer->TCCRnA) |=
     232:	a0 81       	ld	r26, Z
     234:	b1 81       	ldd	r27, Z+1	; 0x01
     236:	3c 91       	ld	r19, X
					(1 << pin->timer->WGMn0) |
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	bc 01       	movw	r22, r24
     23e:	00 84       	ldd	r0, Z+8	; 0x08
     240:	02 c0       	rjmp	.+4      	; 0x246 <Pin_EnableAnalog+0x3e>
     242:	66 0f       	add	r22, r22
     244:	77 1f       	adc	r23, r23
     246:	0a 94       	dec	r0
     248:	e2 f7       	brpl	.-8      	; 0x242 <Pin_EnableAnalog+0x3a>
					(1 << pin->timer->WGMn1) |
     24a:	ac 01       	movw	r20, r24
     24c:	01 84       	ldd	r0, Z+9	; 0x09
     24e:	02 c0       	rjmp	.+4      	; 0x254 <Pin_EnableAnalog+0x4c>
     250:	44 0f       	add	r20, r20
     252:	55 1f       	adc	r21, r21
     254:	0a 94       	dec	r0
     256:	e2 f7       	brpl	.-8      	; 0x250 <Pin_EnableAnalog+0x48>
					(1 << pin->timer->COMnA1) |
					(1 << pin->timer->CSn0) |
					(1 << pin->timer->CSn1);
				break;
				case PIN_66KHz:
					*(pin->timer->TCCRnA) |=
     258:	46 2b       	or	r20, r22
     25a:	43 2b       	or	r20, r19
					(1 << pin->timer->WGMn0) |
					(1 << pin->timer->WGMn1) |
					(1 << pin->timer->COMnA1) |
     25c:	9c 01       	movw	r18, r24
     25e:	04 84       	ldd	r0, Z+12	; 0x0c
     260:	02 c0       	rjmp	.+4      	; 0x266 <Pin_EnableAnalog+0x5e>
     262:	22 0f       	add	r18, r18
     264:	33 1f       	adc	r19, r19
     266:	0a 94       	dec	r0
     268:	e2 f7       	brpl	.-8      	; 0x262 <Pin_EnableAnalog+0x5a>
     26a:	24 2b       	or	r18, r20
					(1 << pin->timer->CSn0);
     26c:	05 84       	ldd	r0, Z+13	; 0x0d
     26e:	02 c0       	rjmp	.+4      	; 0x274 <Pin_EnableAnalog+0x6c>
     270:	88 0f       	add	r24, r24
     272:	99 1f       	adc	r25, r25
     274:	0a 94       	dec	r0
     276:	e2 f7       	brpl	.-8      	; 0x270 <Pin_EnableAnalog+0x68>
     278:	49 c0       	rjmp	.+146    	; 0x30c <Pin_EnableAnalog+0x104>
	switch (pin->timer->bits) {
		// Configuration for 8bit timers
		case 8:
			switch (frequency) {
				case PIN_7KHz:
					*(pin->timer->TCCRnA) |=
     27a:	a0 81       	ld	r26, Z
     27c:	b1 81       	ldd	r27, Z+1	; 0x01
     27e:	3c 91       	ld	r19, X
						(1 << pin->timer->WGMn0) |
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	bc 01       	movw	r22, r24
     286:	00 84       	ldd	r0, Z+8	; 0x08
     288:	02 c0       	rjmp	.+4      	; 0x28e <Pin_EnableAnalog+0x86>
     28a:	66 0f       	add	r22, r22
     28c:	77 1f       	adc	r23, r23
     28e:	0a 94       	dec	r0
     290:	e2 f7       	brpl	.-8      	; 0x28a <Pin_EnableAnalog+0x82>
						(1 << pin->timer->WGMn1) |
     292:	ac 01       	movw	r20, r24
     294:	01 84       	ldd	r0, Z+9	; 0x09
     296:	02 c0       	rjmp	.+4      	; 0x29c <Pin_EnableAnalog+0x94>
     298:	44 0f       	add	r20, r20
     29a:	55 1f       	adc	r21, r21
     29c:	0a 94       	dec	r0
     29e:	e2 f7       	brpl	.-8      	; 0x298 <Pin_EnableAnalog+0x90>
	switch (pin->timer->bits) {
		// Configuration for 8bit timers
		case 8:
			switch (frequency) {
				case PIN_7KHz:
					*(pin->timer->TCCRnA) |=
     2a0:	46 2b       	or	r20, r22
     2a2:	43 2b       	or	r20, r19
						(1 << pin->timer->WGMn0) |
						(1 << pin->timer->WGMn1) |
						(1 << pin->timer->COMnA1) |
     2a4:	9c 01       	movw	r18, r24
     2a6:	04 84       	ldd	r0, Z+12	; 0x0c
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <Pin_EnableAnalog+0xa6>
     2aa:	22 0f       	add	r18, r18
     2ac:	33 1f       	adc	r19, r19
     2ae:	0a 94       	dec	r0
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <Pin_EnableAnalog+0xa2>
     2b2:	25 c0       	rjmp	.+74     	; 0x2fe <Pin_EnableAnalog+0xf6>
						(1 << pin->timer->CSn1);
				break;
				case PIN_1KHz:
					*(pin->timer->TCCRnA) |=
     2b4:	a0 81       	ld	r26, Z
     2b6:	b1 81       	ldd	r27, Z+1	; 0x01
     2b8:	3c 91       	ld	r19, X
					(1 << pin->timer->WGMn0) |
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	bc 01       	movw	r22, r24
     2c0:	00 84       	ldd	r0, Z+8	; 0x08
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <Pin_EnableAnalog+0xc0>
     2c4:	66 0f       	add	r22, r22
     2c6:	77 1f       	adc	r23, r23
     2c8:	0a 94       	dec	r0
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <Pin_EnableAnalog+0xbc>
					(1 << pin->timer->WGMn1) |
     2cc:	ac 01       	movw	r20, r24
     2ce:	01 84       	ldd	r0, Z+9	; 0x09
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <Pin_EnableAnalog+0xce>
     2d2:	44 0f       	add	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	0a 94       	dec	r0
     2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <Pin_EnableAnalog+0xca>
						(1 << pin->timer->WGMn1) |
						(1 << pin->timer->COMnA1) |
						(1 << pin->timer->CSn1);
				break;
				case PIN_1KHz:
					*(pin->timer->TCCRnA) |=
     2da:	46 2b       	or	r20, r22
     2dc:	24 2f       	mov	r18, r20
     2de:	23 2b       	or	r18, r19
					(1 << pin->timer->WGMn0) |
					(1 << pin->timer->WGMn1) |
					(1 << pin->timer->COMnA1) |
     2e0:	ac 01       	movw	r20, r24
     2e2:	04 84       	ldd	r0, Z+12	; 0x0c
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <Pin_EnableAnalog+0xe2>
     2e6:	44 0f       	add	r20, r20
     2e8:	55 1f       	adc	r21, r21
     2ea:	0a 94       	dec	r0
     2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <Pin_EnableAnalog+0xde>
     2ee:	42 2b       	or	r20, r18
					(1 << pin->timer->CSn0) |
     2f0:	9c 01       	movw	r18, r24
     2f2:	05 84       	ldd	r0, Z+13	; 0x0d
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <Pin_EnableAnalog+0xf2>
     2f6:	22 0f       	add	r18, r18
     2f8:	33 1f       	adc	r19, r19
     2fa:	0a 94       	dec	r0
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <Pin_EnableAnalog+0xee>
     2fe:	24 2b       	or	r18, r20
					(1 << pin->timer->CSn1);
     300:	06 84       	ldd	r0, Z+14	; 0x0e
     302:	02 c0       	rjmp	.+4      	; 0x308 <Pin_EnableAnalog+0x100>
     304:	88 0f       	add	r24, r24
     306:	99 1f       	adc	r25, r25
     308:	0a 94       	dec	r0
     30a:	e2 f7       	brpl	.-8      	; 0x304 <Pin_EnableAnalog+0xfc>
						(1 << pin->timer->WGMn1) |
						(1 << pin->timer->COMnA1) |
						(1 << pin->timer->CSn1);
				break;
				case PIN_1KHz:
					*(pin->timer->TCCRnA) |=
     30c:	82 2b       	or	r24, r18
     30e:	8c 93       	st	X, r24
					(1 << pin->timer->WGMn0) |
					(1 << pin->timer->WGMn1) |
					(1 << pin->timer->COMnA1) |
					(1 << pin->timer->CSn0) |
					(1 << pin->timer->CSn1);
				break;
     310:	c5 c0       	rjmp	.+394    	; 0x49c <Pin_EnableAnalog+0x294>
			}
			break;

		// Configuration for 16bit timers
		case 16:
			switch (frequency) {
     312:	62 30       	cpi	r22, 0x02	; 2
     314:	09 f4       	brne	.+2      	; 0x318 <Pin_EnableAnalog+0x110>
     316:	80 c0       	rjmp	.+256    	; 0x418 <Pin_EnableAnalog+0x210>
     318:	63 30       	cpi	r22, 0x03	; 3
     31a:	d1 f1       	breq	.+116    	; 0x390 <Pin_EnableAnalog+0x188>
     31c:	61 11       	cpse	r22, r1
     31e:	be c0       	rjmp	.+380    	; 0x49c <Pin_EnableAnalog+0x294>

					clear_bit(*(pin->timer->TCCRnB), pin->timer->CSn1);
				break;

				case PIN_1KHz:
					*(pin->timer->TCCRnA) |=
     320:	c0 81       	ld	r28, Z
     322:	d1 81       	ldd	r29, Z+1	; 0x01
     324:	98 81       	ld	r25, Y
						(1 << pin->timer->WGMn0) |
     326:	21 e0       	ldi	r18, 0x01	; 1
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	b9 01       	movw	r22, r18
     32c:	00 84       	ldd	r0, Z+8	; 0x08
     32e:	02 c0       	rjmp	.+4      	; 0x334 <Pin_EnableAnalog+0x12c>
     330:	66 0f       	add	r22, r22
     332:	77 1f       	adc	r23, r23
     334:	0a 94       	dec	r0
     336:	e2 f7       	brpl	.-8      	; 0x330 <Pin_EnableAnalog+0x128>
						(1 << pin->timer->COMnA1);
     338:	a9 01       	movw	r20, r18
     33a:	04 84       	ldd	r0, Z+12	; 0x0c
     33c:	02 c0       	rjmp	.+4      	; 0x342 <Pin_EnableAnalog+0x13a>
     33e:	44 0f       	add	r20, r20
     340:	55 1f       	adc	r21, r21
     342:	0a 94       	dec	r0
     344:	e2 f7       	brpl	.-8      	; 0x33e <Pin_EnableAnalog+0x136>

					clear_bit(*(pin->timer->TCCRnB), pin->timer->CSn1);
				break;

				case PIN_1KHz:
					*(pin->timer->TCCRnA) |=
     346:	86 2f       	mov	r24, r22
     348:	84 2b       	or	r24, r20
     34a:	89 2b       	or	r24, r25
     34c:	88 83       	st	Y, r24
						(1 << pin->timer->WGMn0) |
						(1 << pin->timer->COMnA1);

					*(pin->timer->TCCRnB) |=
     34e:	17 96       	adiw	r26, 0x07	; 7
     350:	ed 91       	ld	r30, X+
     352:	fc 91       	ld	r31, X
     354:	18 97       	sbiw	r26, 0x08	; 8
     356:	a2 81       	ldd	r26, Z+2	; 0x02
     358:	b3 81       	ldd	r27, Z+3	; 0x03
     35a:	9c 91       	ld	r25, X
						(1 << pin->timer->CSn0) |
     35c:	b9 01       	movw	r22, r18
     35e:	05 84       	ldd	r0, Z+13	; 0x0d
     360:	02 c0       	rjmp	.+4      	; 0x366 <Pin_EnableAnalog+0x15e>
     362:	66 0f       	add	r22, r22
     364:	77 1f       	adc	r23, r23
     366:	0a 94       	dec	r0
     368:	e2 f7       	brpl	.-8      	; 0x362 <Pin_EnableAnalog+0x15a>
						(1 << pin->timer->CSn1) |
     36a:	a9 01       	movw	r20, r18
     36c:	06 84       	ldd	r0, Z+14	; 0x0e
     36e:	02 c0       	rjmp	.+4      	; 0x374 <Pin_EnableAnalog+0x16c>
     370:	44 0f       	add	r20, r20
     372:	55 1f       	adc	r21, r21
     374:	0a 94       	dec	r0
     376:	e2 f7       	brpl	.-8      	; 0x370 <Pin_EnableAnalog+0x168>
				case PIN_1KHz:
					*(pin->timer->TCCRnA) |=
						(1 << pin->timer->WGMn0) |
						(1 << pin->timer->COMnA1);

					*(pin->timer->TCCRnB) |=
     378:	86 2f       	mov	r24, r22
     37a:	84 2b       	or	r24, r20
     37c:	89 2b       	or	r24, r25
						(1 << pin->timer->CSn0) |
						(1 << pin->timer->CSn1) |
						(1 << pin->timer->WGMn2);
     37e:	02 84       	ldd	r0, Z+10	; 0x0a
     380:	02 c0       	rjmp	.+4      	; 0x386 <Pin_EnableAnalog+0x17e>
     382:	22 0f       	add	r18, r18
     384:	33 1f       	adc	r19, r19
     386:	0a 94       	dec	r0
     388:	e2 f7       	brpl	.-8      	; 0x382 <Pin_EnableAnalog+0x17a>
				case PIN_1KHz:
					*(pin->timer->TCCRnA) |=
						(1 << pin->timer->WGMn0) |
						(1 << pin->timer->COMnA1);

					*(pin->timer->TCCRnB) |=
     38a:	28 2b       	or	r18, r24
     38c:	2c 93       	st	X, r18
						(1 << pin->timer->CSn0) |
						(1 << pin->timer->CSn1) |
						(1 << pin->timer->WGMn2);
				break;
     38e:	86 c0       	rjmp	.+268    	; 0x49c <Pin_EnableAnalog+0x294>

		// Configuration for 16bit timers
		case 16:
			switch (frequency) {
				case PIN_66KHz:
					*(pin->timer->TCCRnA) |=
     390:	c0 81       	ld	r28, Z
     392:	d1 81       	ldd	r29, Z+1	; 0x01
     394:	98 81       	ld	r25, Y
						(1 << pin->timer->WGMn0) |
     396:	21 e0       	ldi	r18, 0x01	; 1
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	b9 01       	movw	r22, r18
     39c:	00 84       	ldd	r0, Z+8	; 0x08
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <Pin_EnableAnalog+0x19c>
     3a0:	66 0f       	add	r22, r22
     3a2:	77 1f       	adc	r23, r23
     3a4:	0a 94       	dec	r0
     3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <Pin_EnableAnalog+0x198>
						(1 << pin->timer->COMnA1);
     3a8:	a9 01       	movw	r20, r18
     3aa:	04 84       	ldd	r0, Z+12	; 0x0c
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <Pin_EnableAnalog+0x1aa>
     3ae:	44 0f       	add	r20, r20
     3b0:	55 1f       	adc	r21, r21
     3b2:	0a 94       	dec	r0
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <Pin_EnableAnalog+0x1a6>

		// Configuration for 16bit timers
		case 16:
			switch (frequency) {
				case PIN_66KHz:
					*(pin->timer->TCCRnA) |=
     3b6:	86 2f       	mov	r24, r22
     3b8:	84 2b       	or	r24, r20
     3ba:	89 2b       	or	r24, r25
     3bc:	88 83       	st	Y, r24
						(1 << pin->timer->WGMn0) |
						(1 << pin->timer->COMnA1);

					*(pin->timer->TCCRnB) |=
     3be:	17 96       	adiw	r26, 0x07	; 7
     3c0:	ed 91       	ld	r30, X+
     3c2:	fc 91       	ld	r31, X
     3c4:	18 97       	sbiw	r26, 0x08	; 8
     3c6:	c2 81       	ldd	r28, Z+2	; 0x02
     3c8:	d3 81       	ldd	r29, Z+3	; 0x03
     3ca:	98 81       	ld	r25, Y
						(1 << pin->timer->CSn0) |
     3cc:	b9 01       	movw	r22, r18
     3ce:	05 84       	ldd	r0, Z+13	; 0x0d
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <Pin_EnableAnalog+0x1ce>
     3d2:	66 0f       	add	r22, r22
     3d4:	77 1f       	adc	r23, r23
     3d6:	0a 94       	dec	r0
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <Pin_EnableAnalog+0x1ca>
						(1 << pin->timer->WGMn2);
     3da:	a9 01       	movw	r20, r18
     3dc:	02 84       	ldd	r0, Z+10	; 0x0a
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <Pin_EnableAnalog+0x1dc>
     3e0:	44 0f       	add	r20, r20
     3e2:	55 1f       	adc	r21, r21
     3e4:	0a 94       	dec	r0
     3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <Pin_EnableAnalog+0x1d8>
				case PIN_66KHz:
					*(pin->timer->TCCRnA) |=
						(1 << pin->timer->WGMn0) |
						(1 << pin->timer->COMnA1);

					*(pin->timer->TCCRnB) |=
     3e8:	86 2f       	mov	r24, r22
     3ea:	84 2b       	or	r24, r20
     3ec:	89 2b       	or	r24, r25
     3ee:	88 83       	st	Y, r24
						(1 << pin->timer->CSn0) |
						(1 << pin->timer->WGMn2);

					clear_bit(*(pin->timer->TCCRnB), pin->timer->CSn1);
     3f0:	17 96       	adiw	r26, 0x07	; 7
     3f2:	0d 90       	ld	r0, X+
     3f4:	bc 91       	ld	r27, X
     3f6:	a0 2d       	mov	r26, r0
     3f8:	12 96       	adiw	r26, 0x02	; 2
     3fa:	ed 91       	ld	r30, X+
     3fc:	fc 91       	ld	r31, X
     3fe:	13 97       	sbiw	r26, 0x03	; 3
     400:	80 81       	ld	r24, Z
     402:	1e 96       	adiw	r26, 0x0e	; 14
     404:	0c 90       	ld	r0, X
     406:	02 c0       	rjmp	.+4      	; 0x40c <Pin_EnableAnalog+0x204>
     408:	22 0f       	add	r18, r18
     40a:	33 1f       	adc	r19, r19
     40c:	0a 94       	dec	r0
     40e:	e2 f7       	brpl	.-8      	; 0x408 <Pin_EnableAnalog+0x200>
     410:	20 95       	com	r18
     412:	28 23       	and	r18, r24
     414:	20 83       	st	Z, r18
				break;
     416:	42 c0       	rjmp	.+132    	; 0x49c <Pin_EnableAnalog+0x294>
						(1 << pin->timer->CSn1) |
						(1 << pin->timer->WGMn2);
				break;

				case PIN_20KHz:
					*(pin->timer->TCCRnA) |=
     418:	c0 81       	ld	r28, Z
     41a:	d1 81       	ldd	r29, Z+1	; 0x01
     41c:	98 81       	ld	r25, Y
						(1 << pin->timer->WGMn1) |
     41e:	21 e0       	ldi	r18, 0x01	; 1
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	b9 01       	movw	r22, r18
     424:	01 84       	ldd	r0, Z+9	; 0x09
     426:	02 c0       	rjmp	.+4      	; 0x42c <Pin_EnableAnalog+0x224>
     428:	66 0f       	add	r22, r22
     42a:	77 1f       	adc	r23, r23
     42c:	0a 94       	dec	r0
     42e:	e2 f7       	brpl	.-8      	; 0x428 <Pin_EnableAnalog+0x220>
						(1 << pin->timer->COMnA1);
     430:	a9 01       	movw	r20, r18
     432:	04 84       	ldd	r0, Z+12	; 0x0c
     434:	02 c0       	rjmp	.+4      	; 0x43a <Pin_EnableAnalog+0x232>
     436:	44 0f       	add	r20, r20
     438:	55 1f       	adc	r21, r21
     43a:	0a 94       	dec	r0
     43c:	e2 f7       	brpl	.-8      	; 0x436 <Pin_EnableAnalog+0x22e>
						(1 << pin->timer->CSn1) |
						(1 << pin->timer->WGMn2);
				break;

				case PIN_20KHz:
					*(pin->timer->TCCRnA) |=
     43e:	86 2f       	mov	r24, r22
     440:	84 2b       	or	r24, r20
     442:	89 2b       	or	r24, r25
     444:	88 83       	st	Y, r24
						(1 << pin->timer->WGMn1) |
						(1 << pin->timer->COMnA1);

					*(pin->timer->TCCRnB) |=
     446:	17 96       	adiw	r26, 0x07	; 7
     448:	ed 91       	ld	r30, X+
     44a:	fc 91       	ld	r31, X
     44c:	18 97       	sbiw	r26, 0x08	; 8
     44e:	c2 81       	ldd	r28, Z+2	; 0x02
     450:	d3 81       	ldd	r29, Z+3	; 0x03
     452:	98 81       	ld	r25, Y
						(1 << pin->timer->CSn1) |
     454:	b9 01       	movw	r22, r18
     456:	06 84       	ldd	r0, Z+14	; 0x0e
     458:	02 c0       	rjmp	.+4      	; 0x45e <Pin_EnableAnalog+0x256>
     45a:	66 0f       	add	r22, r22
     45c:	77 1f       	adc	r23, r23
     45e:	0a 94       	dec	r0
     460:	e2 f7       	brpl	.-8      	; 0x45a <Pin_EnableAnalog+0x252>
						(1 << pin->timer->WGMn2) |
     462:	a9 01       	movw	r20, r18
     464:	02 84       	ldd	r0, Z+10	; 0x0a
     466:	02 c0       	rjmp	.+4      	; 0x46c <Pin_EnableAnalog+0x264>
     468:	44 0f       	add	r20, r20
     46a:	55 1f       	adc	r21, r21
     46c:	0a 94       	dec	r0
     46e:	e2 f7       	brpl	.-8      	; 0x468 <Pin_EnableAnalog+0x260>
				case PIN_20KHz:
					*(pin->timer->TCCRnA) |=
						(1 << pin->timer->WGMn1) |
						(1 << pin->timer->COMnA1);

					*(pin->timer->TCCRnB) |=
     470:	86 2f       	mov	r24, r22
     472:	84 2b       	or	r24, r20
     474:	89 2b       	or	r24, r25
						(1 << pin->timer->CSn1) |
						(1 << pin->timer->WGMn2) |
						(1 << pin->timer->WGMn3);
     476:	03 84       	ldd	r0, Z+11	; 0x0b
     478:	02 c0       	rjmp	.+4      	; 0x47e <Pin_EnableAnalog+0x276>
     47a:	22 0f       	add	r18, r18
     47c:	33 1f       	adc	r19, r19
     47e:	0a 94       	dec	r0
     480:	e2 f7       	brpl	.-8      	; 0x47a <Pin_EnableAnalog+0x272>
				case PIN_20KHz:
					*(pin->timer->TCCRnA) |=
						(1 << pin->timer->WGMn1) |
						(1 << pin->timer->COMnA1);

					*(pin->timer->TCCRnB) |=
     482:	28 2b       	or	r18, r24
     484:	28 83       	st	Y, r18
						(1 << pin->timer->CSn1) |
						(1 << pin->timer->WGMn2) |
						(1 << pin->timer->WGMn3);

					*(pin->timer->ICRn) = 100;
     486:	17 96       	adiw	r26, 0x07	; 7
     488:	ed 91       	ld	r30, X+
     48a:	fc 91       	ld	r31, X
     48c:	18 97       	sbiw	r26, 0x08	; 8
     48e:	06 80       	ldd	r0, Z+6	; 0x06
     490:	f7 81       	ldd	r31, Z+7	; 0x07
     492:	e0 2d       	mov	r30, r0
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	91 83       	std	Z+1, r25	; 0x01
     49a:	80 83       	st	Z, r24
				break;
			}
			break;
	}
}
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <Pin_WriteAnalog>:

void Pin_WriteAnalog(Pin* pin, uint16_t value) {
	*(pin->timer->OCRnA) = value;
     4a2:	dc 01       	movw	r26, r24
     4a4:	17 96       	adiw	r26, 0x07	; 7
     4a6:	ed 91       	ld	r30, X+
     4a8:	fc 91       	ld	r31, X
     4aa:	18 97       	sbiw	r26, 0x08	; 8
     4ac:	04 80       	ldd	r0, Z+4	; 0x04
     4ae:	f5 81       	ldd	r31, Z+5	; 0x05
     4b0:	e0 2d       	mov	r30, r0
     4b2:	71 83       	std	Z+1, r23	; 0x01
     4b4:	60 83       	st	Z, r22
     4b6:	08 95       	ret

000004b8 <Pin_WriteDigital>:
}

void Pin_WriteDigital(Pin* pin, PinValue value) {
     4b8:	dc 01       	movw	r26, r24
     4ba:	12 96       	adiw	r26, 0x02	; 2
     4bc:	ed 91       	ld	r30, X+
     4be:	fc 91       	ld	r31, X
     4c0:	13 97       	sbiw	r26, 0x03	; 3
     4c2:	16 96       	adiw	r26, 0x06	; 6
     4c4:	3c 91       	ld	r19, X
	// TODO: Implement without condition
	if (value == PIN_HIGH) {
		set_bit(*(pin->PORTx), pin->Pxn);
     4c6:	20 81       	ld	r18, Z
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <Pin_WriteDigital+0x18>
     4ce:	88 0f       	add	r24, r24
     4d0:	3a 95       	dec	r19
     4d2:	ea f7       	brpl	.-6      	; 0x4ce <Pin_WriteDigital+0x16>
	*(pin->timer->OCRnA) = value;
}

void Pin_WriteDigital(Pin* pin, PinValue value) {
	// TODO: Implement without condition
	if (value == PIN_HIGH) {
     4d4:	61 30       	cpi	r22, 0x01	; 1
     4d6:	11 f4       	brne	.+4      	; 0x4dc <Pin_WriteDigital+0x24>
		set_bit(*(pin->PORTx), pin->Pxn);
     4d8:	82 2b       	or	r24, r18
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <Pin_WriteDigital+0x28>
	} else {
		clear_bit(*(pin->PORTx), pin->Pxn);
     4dc:	80 95       	com	r24
     4de:	82 23       	and	r24, r18
     4e0:	80 83       	st	Z, r24
     4e2:	08 95       	ret

000004e4 <Pin_ReadDigital>:
	}
}

PinValue Pin_ReadDigital(Pin* pin) {
	if (bit_is_set(*(pin->PINx), pin->Pxn)) {
     4e4:	dc 01       	movw	r26, r24
     4e6:	14 96       	adiw	r26, 0x04	; 4
     4e8:	ed 91       	ld	r30, X+
     4ea:	fc 91       	ld	r31, X
     4ec:	15 97       	sbiw	r26, 0x05	; 5
     4ee:	20 81       	ld	r18, Z
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	f9 01       	movw	r30, r18
     4f4:	16 96       	adiw	r26, 0x06	; 6
     4f6:	0c 90       	ld	r0, X
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <Pin_ReadDigital+0x1a>
     4fa:	f5 95       	asr	r31
     4fc:	e7 95       	ror	r30
     4fe:	0a 94       	dec	r0
     500:	e2 f7       	brpl	.-8      	; 0x4fa <Pin_ReadDigital+0x16>
     502:	cf 01       	movw	r24, r30
		return PIN_HIGH;
	} else {
		return PIN_LOW;
	}
}
     504:	81 70       	andi	r24, 0x01	; 1
     506:	08 95       	ret

00000508 <BinarySensor_Add>:
#include "BinarySensor.h"

static BinarySensor instances[BINARY_SENSOR_CONFIG_MAX];
static uint8_t instancesCount = 0;

void BinarySensor_Add(Pin* pin, uint8_t number) {
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	8c 01       	movw	r16, r24
     512:	d6 2f       	mov	r29, r22
	uint8_t index = instancesCount;
     514:	c0 91 34 02 	lds	r28, 0x0234

	// Set mode
    Pin_SetMode(pin, PIN_INPUT);
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <Pin_SetMode>

    // Initialize values
    instances[index].canId = BINARY_SENSOR_CANID + number;
     51e:	85 e0       	ldi	r24, 0x05	; 5
     520:	c8 9f       	mul	r28, r24
     522:	f0 01       	movw	r30, r0
     524:	11 24       	eor	r1, r1
     526:	eb 5c       	subi	r30, 0xCB	; 203
     528:	fd 4f       	sbci	r31, 0xFD	; 253
     52a:	6d 2f       	mov	r22, r29
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	60 5f       	subi	r22, 0xF0	; 240
     530:	72 47       	sbci	r23, 0x72	; 114
     532:	73 83       	std	Z+3, r23	; 0x03
     534:	62 83       	std	Z+2, r22	; 0x02
    instances[index].pin = pin;
     536:	11 83       	std	Z+1, r17	; 0x01
     538:	00 83       	st	Z, r16
    instances[index].state = 0;
     53a:	14 82       	std	Z+4, r1	; 0x04

    // Return index
    instancesCount++;
     53c:	80 91 34 02 	lds	r24, 0x0234
     540:	8f 5f       	subi	r24, 0xFF	; 255
     542:	80 93 34 02 	sts	0x0234, r24
}
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	0f 91       	pop	r16
     54e:	08 95       	ret

00000550 <BinarySensor_UpdateAll>:

inline void BinarySensor_UpdateAll(void) {
     550:	ef 92       	push	r14
     552:	ff 92       	push	r15
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	09 e3       	ldi	r16, 0x39	; 57
     55e:	12 e0       	ldi	r17, 0x02	; 2
     560:	c5 e3       	ldi	r28, 0x35	; 53
     562:	d2 e0       	ldi	r29, 0x02	; 2
	size_t i;
	for (i = 0; i < instancesCount; i++) {
     564:	e1 2c       	mov	r14, r1
     566:	f1 2c       	mov	r15, r1
     568:	80 91 34 02 	lds	r24, 0x0234
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	e8 16       	cp	r14, r24
     570:	f9 06       	cpc	r15, r25
     572:	08 f0       	brcs	.+2      	; 0x576 <BinarySensor_UpdateAll+0x26>
     574:	44 c0       	rjmp	.+136    	; 0x5fe <BinarySensor_UpdateAll+0xae>
		if (Pin_ReadDigital(instances[i].pin) == PIN_HIGH && instances[i].state == 0) {
     576:	88 81       	ld	r24, Y
     578:	99 81       	ldd	r25, Y+1	; 0x01
     57a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Pin_ReadDigital>
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	c9 f4       	brne	.+50     	; 0x5b4 <BinarySensor_UpdateAll+0x64>
     582:	f8 01       	movw	r30, r16
     584:	90 81       	ld	r25, Z
     586:	91 11       	cpse	r25, r1
     588:	15 c0       	rjmp	.+42     	; 0x5b4 <BinarySensor_UpdateAll+0x64>
			instances[i].state = 1;
     58a:	80 83       	st	Z, r24
			can_wrapper_send(instances[i].canId, 1, instances[i].state);
     58c:	1f 92       	push	r1
     58e:	8f 93       	push	r24
     590:	8f 93       	push	r24
     592:	8a 81       	ldd	r24, Y+2	; 0x02
     594:	9b 81       	ldd	r25, Y+3	; 0x03
     596:	1f 92       	push	r1
     598:	1f 92       	push	r1
     59a:	9f 93       	push	r25
     59c:	8f 93       	push	r24
     59e:	0e 94 14 05 	call	0xa28	; 0xa28 <can_wrapper_send>
     5a2:	8d b7       	in	r24, 0x3d	; 61
     5a4:	9e b7       	in	r25, 0x3e	; 62
     5a6:	07 96       	adiw	r24, 0x07	; 7
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	9e bf       	out	0x3e, r25	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	8d bf       	out	0x3d, r24	; 61
     5b2:	1e c0       	rjmp	.+60     	; 0x5f0 <BinarySensor_UpdateAll+0xa0>
		}
		else if (Pin_ReadDigital(instances[i].pin) == PIN_LOW && instances[i].state == 1) {
     5b4:	88 81       	ld	r24, Y
     5b6:	99 81       	ldd	r25, Y+1	; 0x01
     5b8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Pin_ReadDigital>
     5bc:	81 11       	cpse	r24, r1
     5be:	18 c0       	rjmp	.+48     	; 0x5f0 <BinarySensor_UpdateAll+0xa0>
     5c0:	f8 01       	movw	r30, r16
     5c2:	80 81       	ld	r24, Z
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	a1 f4       	brne	.+40     	; 0x5f0 <BinarySensor_UpdateAll+0xa0>
			instances[i].state = 0;
     5c8:	10 82       	st	Z, r1
			can_wrapper_send(instances[i].canId, 1, instances[i].state);
     5ca:	1f 92       	push	r1
     5cc:	1f 92       	push	r1
     5ce:	8f 93       	push	r24
     5d0:	8a 81       	ldd	r24, Y+2	; 0x02
     5d2:	9b 81       	ldd	r25, Y+3	; 0x03
     5d4:	1f 92       	push	r1
     5d6:	1f 92       	push	r1
     5d8:	9f 93       	push	r25
     5da:	8f 93       	push	r24
     5dc:	0e 94 14 05 	call	0xa28	; 0xa28 <can_wrapper_send>
     5e0:	8d b7       	in	r24, 0x3d	; 61
     5e2:	9e b7       	in	r25, 0x3e	; 62
     5e4:	07 96       	adiw	r24, 0x07	; 7
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	9e bf       	out	0x3e, r25	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	8d bf       	out	0x3d, r24	; 61
    instancesCount++;
}

inline void BinarySensor_UpdateAll(void) {
	size_t i;
	for (i = 0; i < instancesCount; i++) {
     5f0:	9f ef       	ldi	r25, 0xFF	; 255
     5f2:	e9 1a       	sub	r14, r25
     5f4:	f9 0a       	sbc	r15, r25
     5f6:	0b 5f       	subi	r16, 0xFB	; 251
     5f8:	1f 4f       	sbci	r17, 0xFF	; 255
     5fa:	25 96       	adiw	r28, 0x05	; 5
     5fc:	b5 cf       	rjmp	.-150    	; 0x568 <BinarySensor_UpdateAll+0x18>
		else if (Pin_ReadDigital(instances[i].pin) == PIN_LOW && instances[i].state == 1) {
			instances[i].state = 0;
			can_wrapper_send(instances[i].canId, 1, instances[i].state);
		}
	}
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	08 95       	ret

0000060c <AX12_UpdateAll>:
static AX12 positionUpdateQueue[AX12_CONFIG_QUEUE_MAX];
static uint8_t positionUpdateQueueCount = 0;

static size_t i;

void AX12_UpdateAll(void) {
     60c:	08 95       	ret

0000060e <AX12_InitAll>:
	}
	*/
}

void AX12_InitAll() {
	dynamixel_ax_init();
     60e:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <dynamixel_ax_init>

00000612 <AX12_OnMessage>:
}

bool AX12_OnMessage(can_t* canMsg) {
     612:	cf 92       	push	r12
     614:	df 92       	push	r13
     616:	ef 92       	push	r14
     618:	ff 92       	push	r15
     61a:	0f 93       	push	r16
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	a4 97       	sbiw	r28, 0x24	; 36
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	cd bf       	out	0x3d, r28	; 61
	if (unlikely(canMsg->id == AX12_CANID)) {
     632:	fc 01       	movw	r30, r24
     634:	c0 80       	ld	r12, Z
     636:	d1 80       	ldd	r13, Z+1	; 0x01
     638:	e2 80       	ldd	r14, Z+2	; 0x02
     63a:	f3 80       	ldd	r15, Z+3	; 0x03
     63c:	f0 e7       	ldi	r31, 0x70	; 112
     63e:	cf 16       	cp	r12, r31
     640:	fd e8       	ldi	r31, 0x8D	; 141
     642:	df 06       	cpc	r13, r31
     644:	e1 04       	cpc	r14, r1
     646:	f1 04       	cpc	r15, r1
     648:	a1 f5       	brne	.+104    	; 0x6b2 <AX12_OnMessage+0xa0>
     64a:	8c 01       	movw	r16, r24
		uint8_t rxpacket[11];
		uint8_t status;
		uint8_t packetKernelLength;

		// Send packet to AX12 (Brain -> AX12)
		memcpy(txpacket + 2, canMsg->data, canMsg->length);
     64c:	fc 01       	movw	r30, r24
     64e:	45 81       	ldd	r20, Z+5	; 0x05
     650:	50 e0       	ldi	r21, 0x00	; 0
     652:	bc 01       	movw	r22, r24
     654:	6a 5f       	subi	r22, 0xFA	; 250
     656:	7f 4f       	sbci	r23, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	4c 96       	adiw	r24, 0x1c	; 28
     65c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <memcpy>
		status = dynamixel_ax_txrx(txpacket, rxpacket);
     660:	be 01       	movw	r22, r28
     662:	61 5f       	subi	r22, 0xF1	; 241
     664:	7f 4f       	sbci	r23, 0xFF	; 255
     666:	ce 01       	movw	r24, r28
     668:	4a 96       	adiw	r24, 0x1a	; 26
     66a:	0e 94 49 06 	call	0xc92	; 0xc92 <dynamixel_ax_txrx>

		// Get a response from AX12 (Brain <- AX12)
		can_t msg;
		msg.id = AX12_CANID;
     66e:	c9 82       	std	Y+1, r12	; 0x01
     670:	da 82       	std	Y+2, r13	; 0x02
     672:	eb 82       	std	Y+3, r14	; 0x03
     674:	fc 82       	std	Y+4, r15	; 0x04
		msg.flags.rtr = 0;
     676:	9d 81       	ldd	r25, Y+5	; 0x05
		msg.flags.extended = 1;
     678:	9e 7f       	andi	r25, 0xFE	; 254
     67a:	92 60       	ori	r25, 0x02	; 2
     67c:	9d 83       	std	Y+5, r25	; 0x05
		if (status == DYNAMIXEL_SUCCESS) {
     67e:	81 30       	cpi	r24, 0x01	; 1
     680:	61 f4       	brne	.+24     	; 0x69a <AX12_OnMessage+0x88>
			// Length + (1 Byte ID) + (1 Byte Lenght) - (1 Byte Checksum)
			packetKernelLength = rxpacket[3] + 2 - 1;
     682:	1a 89       	ldd	r17, Y+18	; 0x12
     684:	1f 5f       	subi	r17, 0xFF	; 255
			memcpy(msg.data, rxpacket + 2, packetKernelLength);
     686:	41 2f       	mov	r20, r17
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	be 01       	movw	r22, r28
     68c:	6f 5e       	subi	r22, 0xEF	; 239
     68e:	7f 4f       	sbci	r23, 0xFF	; 255
     690:	ce 01       	movw	r24, r28
     692:	07 96       	adiw	r24, 0x07	; 7
     694:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <memcpy>
     698:	05 c0       	rjmp	.+10     	; 0x6a4 <AX12_OnMessage+0x92>
		} else {
			packetKernelLength = 2;
			msg.data[0] = canMsg->data[0]; // ID
     69a:	f8 01       	movw	r30, r16
     69c:	96 81       	ldd	r25, Z+6	; 0x06
     69e:	9f 83       	std	Y+7, r25	; 0x07
			msg.data[1] = status;
     6a0:	88 87       	std	Y+8, r24	; 0x08
		if (status == DYNAMIXEL_SUCCESS) {
			// Length + (1 Byte ID) + (1 Byte Lenght) - (1 Byte Checksum)
			packetKernelLength = rxpacket[3] + 2 - 1;
			memcpy(msg.data, rxpacket + 2, packetKernelLength);
		} else {
			packetKernelLength = 2;
     6a2:	12 e0       	ldi	r17, 0x02	; 2
			msg.data[0] = canMsg->data[0]; // ID
			msg.data[1] = status;
		}
		msg.length = packetKernelLength;
     6a4:	1e 83       	std	Y+6, r17	; 0x06
		can_send_message(&msg);
     6a6:	ce 01       	movw	r24, r28
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	0e 94 da 09 	call	0x13b4	; 0x13b4 <can_send_message>

		return true;
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <AX12_OnMessage+0xa2>
	}

	return false;
     6b2:	80 e0       	ldi	r24, 0x00	; 0
}
     6b4:	a4 96       	adiw	r28, 0x24	; 36
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	df 90       	pop	r13
     6ce:	cf 90       	pop	r12
     6d0:	08 95       	ret

000006d2 <PWM_SetDuty>:
}

// duty cycle (0 pr-1000 pr)
void PWM_SetDuty(uint16_t promil) {

  if(promil > 100) {
     6d2:	85 36       	cpi	r24, 0x65	; 101
     6d4:	91 05       	cpc	r25, r1
     6d6:	30 f4       	brcc	.+12     	; 0x6e4 <PWM_SetDuty+0x12>
    promil = 100;
  } else if(promil < 50) {
     6d8:	82 33       	cpi	r24, 0x32	; 50
     6da:	91 05       	cpc	r25, r1
     6dc:	28 f4       	brcc	.+10     	; 0x6e8 <PWM_SetDuty+0x16>
    promil = 50;
     6de:	82 e3       	ldi	r24, 0x32	; 50
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <PWM_SetDuty+0x16>

// duty cycle (0 pr-1000 pr)
void PWM_SetDuty(uint16_t promil) {

  if(promil > 100) {
    promil = 100;
     6e4:	84 e6       	ldi	r24, 0x64	; 100
     6e6:	90 e0       	ldi	r25, 0x00	; 0
  } else if(promil < 50) {
    promil = 50;
  }

  uint16_t duty = 20 * promil;
     6e8:	44 e1       	ldi	r20, 0x14	; 20
     6ea:	48 9f       	mul	r20, r24
     6ec:	90 01       	movw	r18, r0
     6ee:	49 9f       	mul	r20, r25
     6f0:	30 0d       	add	r19, r0
     6f2:	11 24       	eor	r1, r1

  OCR1A = duty;
     6f4:	30 93 89 00 	sts	0x0089, r19
     6f8:	20 93 88 00 	sts	0x0088, r18
     6fc:	08 95       	ret

000006fe <Brushless_Calibration>:
     6fe:	e8 e8       	ldi	r30, 0x88	; 136
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	80 ed       	ldi	r24, 0xD0	; 208
     704:	97 e0       	ldi	r25, 0x07	; 7
     706:	91 83       	std	Z+1, r25	; 0x01
     708:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     70a:	24 e5       	ldi	r18, 0x54	; 84
     70c:	35 e8       	ldi	r19, 0x85	; 133
     70e:	85 e4       	ldi	r24, 0x45	; 69
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	21 50       	subi	r18, 0x01	; 1
     714:	30 40       	sbci	r19, 0x00	; 0
     716:	80 40       	sbci	r24, 0x00	; 0
     718:	90 40       	sbci	r25, 0x00	; 0
     71a:	d9 f7       	brne	.-10     	; 0x712 <Brushless_Calibration+0x14>
     71c:	00 c0       	rjmp	.+0      	; 0x71e <Brushless_Calibration+0x20>
     71e:	00 c0       	rjmp	.+0      	; 0x720 <Brushless_Calibration+0x22>
     720:	00 00       	nop
     722:	88 ee       	ldi	r24, 0xE8	; 232
     724:	93 e0       	ldi	r25, 0x03	; 3
     726:	91 83       	std	Z+1, r25	; 0x01
     728:	80 83       	st	Z, r24
     72a:	2f ef       	ldi	r18, 0xFF	; 255
     72c:	37 ea       	ldi	r19, 0xA7	; 167
     72e:	81 e6       	ldi	r24, 0x61	; 97
     730:	21 50       	subi	r18, 0x01	; 1
     732:	30 40       	sbci	r19, 0x00	; 0
     734:	80 40       	sbci	r24, 0x00	; 0
     736:	e1 f7       	brne	.-8      	; 0x730 <Brushless_Calibration+0x32>
     738:	00 c0       	rjmp	.+0      	; 0x73a <Brushless_Calibration+0x3c>
     73a:	00 00       	nop
     73c:	08 95       	ret

0000073e <Brushless_Init>:
  PWM_SetDuty(50);
  _delay_ms(2000);

}

void Brushless_Init(Pin* pin) {
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	ec 01       	movw	r28, r24

  Pin_SetMode(pin, PIN_OUTPUT);
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	0e 94 da 00 	call	0x1b4	; 0x1b4 <Pin_SetMode>

  *(pin->timer->TCCRnA) |= (1 << pin->timer->COMnA1) | (1 << pin->timer->WGMn1);
     74a:	ef 81       	ldd	r30, Y+7	; 0x07
     74c:	f8 85       	ldd	r31, Y+8	; 0x08
     74e:	a0 81       	ld	r26, Z
     750:	b1 81       	ldd	r27, Z+1	; 0x01
     752:	9c 91       	ld	r25, X
     754:	21 e0       	ldi	r18, 0x01	; 1
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	b9 01       	movw	r22, r18
     75a:	04 84       	ldd	r0, Z+12	; 0x0c
     75c:	02 c0       	rjmp	.+4      	; 0x762 <Brushless_Init+0x24>
     75e:	66 0f       	add	r22, r22
     760:	77 1f       	adc	r23, r23
     762:	0a 94       	dec	r0
     764:	e2 f7       	brpl	.-8      	; 0x75e <Brushless_Init+0x20>
     766:	a9 01       	movw	r20, r18
     768:	01 84       	ldd	r0, Z+9	; 0x09
     76a:	02 c0       	rjmp	.+4      	; 0x770 <Brushless_Init+0x32>
     76c:	44 0f       	add	r20, r20
     76e:	55 1f       	adc	r21, r21
     770:	0a 94       	dec	r0
     772:	e2 f7       	brpl	.-8      	; 0x76c <Brushless_Init+0x2e>
     774:	86 2f       	mov	r24, r22
     776:	84 2b       	or	r24, r20
     778:	89 2b       	or	r24, r25
     77a:	8c 93       	st	X, r24
  *(pin->timer->TCCRnB) |= (1 << pin->timer->WGMn3) | (1 << pin->timer->CSn1);
     77c:	ef 81       	ldd	r30, Y+7	; 0x07
     77e:	f8 85       	ldd	r31, Y+8	; 0x08
     780:	a2 81       	ldd	r26, Z+2	; 0x02
     782:	b3 81       	ldd	r27, Z+3	; 0x03
     784:	8c 91       	ld	r24, X
     786:	a9 01       	movw	r20, r18
     788:	03 84       	ldd	r0, Z+11	; 0x0b
     78a:	02 c0       	rjmp	.+4      	; 0x790 <Brushless_Init+0x52>
     78c:	44 0f       	add	r20, r20
     78e:	55 1f       	adc	r21, r21
     790:	0a 94       	dec	r0
     792:	e2 f7       	brpl	.-8      	; 0x78c <Brushless_Init+0x4e>
     794:	06 84       	ldd	r0, Z+14	; 0x0e
     796:	02 c0       	rjmp	.+4      	; 0x79c <Brushless_Init+0x5e>
     798:	22 0f       	add	r18, r18
     79a:	33 1f       	adc	r19, r19
     79c:	0a 94       	dec	r0
     79e:	e2 f7       	brpl	.-8      	; 0x798 <Brushless_Init+0x5a>
     7a0:	24 2b       	or	r18, r20
     7a2:	28 2b       	or	r18, r24
     7a4:	2c 93       	st	X, r18
  *(pin->timer->ICRn) = MAX_OCR;
     7a6:	ef 81       	ldd	r30, Y+7	; 0x07
     7a8:	f8 85       	ldd	r31, Y+8	; 0x08
     7aa:	06 80       	ldd	r0, Z+6	; 0x06
     7ac:	f7 81       	ldd	r31, Z+7	; 0x07
     7ae:	e0 2d       	mov	r30, r0
     7b0:	80 e2       	ldi	r24, 0x20	; 32
     7b2:	9e e4       	ldi	r25, 0x4E	; 78
     7b4:	91 83       	std	Z+1, r25	; 0x01
     7b6:	80 83       	st	Z, r24
    promil = 50;
  }

  uint16_t duty = 20 * promil;

  OCR1A = duty;
     7b8:	88 ee       	ldi	r24, 0xE8	; 232
     7ba:	93 e0       	ldi	r25, 0x03	; 3
     7bc:	90 93 89 00 	sts	0x0089, r25
     7c0:	80 93 88 00 	sts	0x0088, r24
  *(pin->timer->ICRn) = MAX_OCR;

  PWM_SetDuty(50);
  

}
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	08 95       	ret

000007ca <Brushless_OnMessage>:
  OCR1A = duty;

}

// speed (50 pr - 100 pr)
bool Brushless_OnMessage(can_t* canMsg) {
     7ca:	ff 92       	push	r15
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29

  size_t i = 0;

  if(canMsg->id == BRUSHLESS_CANID) {
     7d4:	fc 01       	movw	r30, r24
     7d6:	40 81       	ld	r20, Z
     7d8:	51 81       	ldd	r21, Z+1	; 0x01
     7da:	62 81       	ldd	r22, Z+2	; 0x02
     7dc:	73 81       	ldd	r23, Z+3	; 0x03
     7de:	43 35       	cpi	r20, 0x53	; 83
     7e0:	5d 48       	sbci	r21, 0x8D	; 141
     7e2:	61 05       	cpc	r22, r1
     7e4:	71 05       	cpc	r23, r1
     7e6:	09 f0       	breq	.+2      	; 0x7ea <Brushless_OnMessage+0x20>
     7e8:	76 c0       	rjmp	.+236    	; 0x8d6 <Brushless_OnMessage+0x10c>
     7ea:	fc 01       	movw	r30, r24

    uint8_t speed = canMsg->data[0];
     7ec:	f6 80       	ldd	r15, Z+6	; 0x06

    if(speed > CurrentSpeed) {
     7ee:	c0 91 67 02 	lds	r28, 0x0267
     7f2:	0f 2d       	mov	r16, r15
     7f4:	10 e0       	ldi	r17, 0x00	; 0
     7f6:	cf 15       	cp	r28, r15
     7f8:	60 f5       	brcc	.+88     	; 0x852 <Brushless_OnMessage+0x88>
      for(i = CurrentSpeed; i < speed; i++) {
     7fa:	d0 e0       	ldi	r29, 0x00	; 0
     7fc:	c0 17       	cp	r28, r16
     7fe:	d1 07       	cpc	r29, r17
     800:	08 f0       	brcs	.+2      	; 0x804 <Brushless_OnMessage+0x3a>
     802:	65 c0       	rjmp	.+202    	; 0x8ce <Brushless_OnMessage+0x104>
          PWM_SetDuty((uint16_t)(50 + (50.0 / 255.0) * i + 0.5));
     804:	be 01       	movw	r22, r28
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__floatunsisf>
     80e:	29 ec       	ldi	r18, 0xC9	; 201
     810:	38 ec       	ldi	r19, 0xC8	; 200
     812:	48 e4       	ldi	r20, 0x48	; 72
     814:	5e e3       	ldi	r21, 0x3E	; 62
     816:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__mulsf3>
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	48 e4       	ldi	r20, 0x48	; 72
     820:	52 e4       	ldi	r21, 0x42	; 66
     822:	0e 94 4f 0b 	call	0x169e	; 0x169e <__addsf3>
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	5f e3       	ldi	r21, 0x3F	; 63
     82e:	0e 94 4f 0b 	call	0x169e	; 0x169e <__addsf3>
     832:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__fixunssfsi>
     836:	cb 01       	movw	r24, r22
     838:	0e 94 69 03 	call	0x6d2	; 0x6d2 <PWM_SetDuty>
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	89 ef       	ldi	r24, 0xF9	; 249
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	21 50       	subi	r18, 0x01	; 1
     844:	80 40       	sbci	r24, 0x00	; 0
     846:	90 40       	sbci	r25, 0x00	; 0
     848:	e1 f7       	brne	.-8      	; 0x842 <Brushless_OnMessage+0x78>
     84a:	00 c0       	rjmp	.+0      	; 0x84c <Brushless_OnMessage+0x82>
     84c:	00 00       	nop
  if(canMsg->id == BRUSHLESS_CANID) {

    uint8_t speed = canMsg->data[0];

    if(speed > CurrentSpeed) {
      for(i = CurrentSpeed; i < speed; i++) {
     84e:	21 96       	adiw	r28, 0x01	; 1
     850:	d5 cf       	rjmp	.-86     	; 0x7fc <Brushless_OnMessage+0x32>
          PWM_SetDuty((uint16_t)(50 + (50.0 / 255.0) * i + 0.5));
          _delay_ms(BRUSHLESS_ACC_COEF);
        }
    } else if(speed < CurrentSpeed) {
     852:	fc 16       	cp	r15, r28
     854:	28 f5       	brcc	.+74     	; 0x8a0 <Brushless_OnMessage+0xd6>
      for(i = CurrentSpeed; i > speed; i--) {
     856:	d0 e0       	ldi	r29, 0x00	; 0
     858:	0c 17       	cp	r16, r28
     85a:	1d 07       	cpc	r17, r29
     85c:	c0 f5       	brcc	.+112    	; 0x8ce <Brushless_OnMessage+0x104>
        PWM_SetDuty((uint16_t)(50 + (50.0 / 255) * i));
     85e:	be 01       	movw	r22, r28
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__floatunsisf>
     868:	29 ec       	ldi	r18, 0xC9	; 201
     86a:	38 ec       	ldi	r19, 0xC8	; 200
     86c:	48 e4       	ldi	r20, 0x48	; 72
     86e:	5e e3       	ldi	r21, 0x3E	; 62
     870:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__mulsf3>
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	48 e4       	ldi	r20, 0x48	; 72
     87a:	52 e4       	ldi	r21, 0x42	; 66
     87c:	0e 94 4f 0b 	call	0x169e	; 0x169e <__addsf3>
     880:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__fixunssfsi>
     884:	cb 01       	movw	r24, r22
     886:	0e 94 69 03 	call	0x6d2	; 0x6d2 <PWM_SetDuty>
     88a:	ef ef       	ldi	r30, 0xFF	; 255
     88c:	f9 ef       	ldi	r31, 0xF9	; 249
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	e1 50       	subi	r30, 0x01	; 1
     892:	f0 40       	sbci	r31, 0x00	; 0
     894:	20 40       	sbci	r18, 0x00	; 0
     896:	e1 f7       	brne	.-8      	; 0x890 <Brushless_OnMessage+0xc6>
     898:	00 c0       	rjmp	.+0      	; 0x89a <Brushless_OnMessage+0xd0>
     89a:	00 00       	nop
      for(i = CurrentSpeed; i < speed; i++) {
          PWM_SetDuty((uint16_t)(50 + (50.0 / 255.0) * i + 0.5));
          _delay_ms(BRUSHLESS_ACC_COEF);
        }
    } else if(speed < CurrentSpeed) {
      for(i = CurrentSpeed; i > speed; i--) {
     89c:	21 97       	sbiw	r28, 0x01	; 1
     89e:	dc cf       	rjmp	.-72     	; 0x858 <Brushless_OnMessage+0x8e>
        PWM_SetDuty((uint16_t)(50 + (50.0 / 255) * i));
        _delay_ms(BRUSHLESS_ACC_COEF);
      }
    } else {
      PWM_SetDuty((uint16_t)(50 + (50.0 / 255) * speed));
     8a0:	b8 01       	movw	r22, r16
     8a2:	11 0f       	add	r17, r17
     8a4:	88 0b       	sbc	r24, r24
     8a6:	99 0b       	sbc	r25, r25
     8a8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__floatsisf>
     8ac:	29 ec       	ldi	r18, 0xC9	; 201
     8ae:	38 ec       	ldi	r19, 0xC8	; 200
     8b0:	48 e4       	ldi	r20, 0x48	; 72
     8b2:	5e e3       	ldi	r21, 0x3E	; 62
     8b4:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__mulsf3>
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	48 e4       	ldi	r20, 0x48	; 72
     8be:	52 e4       	ldi	r21, 0x42	; 66
     8c0:	0e 94 4f 0b 	call	0x169e	; 0x169e <__addsf3>
     8c4:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__fixunssfsi>
     8c8:	cb 01       	movw	r24, r22
     8ca:	0e 94 69 03 	call	0x6d2	; 0x6d2 <PWM_SetDuty>
    }

    CurrentSpeed = speed;
     8ce:	f0 92 67 02 	sts	0x0267, r15

    return true;
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <Brushless_OnMessage+0x10e>
  }

  return false;
     8d6:	80 e0       	ldi	r24, 0x00	; 0
}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	08 95       	ret

000008e4 <USART0_init>:

void USART0_init(uint32_t baud)
{
	uint32_t temp_baud = 0;

	temp_baud = (CLOCK_FQ / (8 * baud)) - 1;
     8e4:	9b 01       	movw	r18, r22
     8e6:	ac 01       	movw	r20, r24
     8e8:	83 e0       	ldi	r24, 0x03	; 3
     8ea:	22 0f       	add	r18, r18
     8ec:	33 1f       	adc	r19, r19
     8ee:	44 1f       	adc	r20, r20
     8f0:	55 1f       	adc	r21, r21
     8f2:	8a 95       	dec	r24
     8f4:	d1 f7       	brne	.-12     	; 0x8ea <USART0_init+0x6>
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	74 e2       	ldi	r23, 0x24	; 36
     8fa:	84 ef       	ldi	r24, 0xF4	; 244
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__udivmodsi4>
     902:	ba 01       	movw	r22, r20
     904:	a9 01       	movw	r20, r18
     906:	41 50       	subi	r20, 0x01	; 1
     908:	51 09       	sbc	r21, r1
     90a:	61 09       	sbc	r22, r1
     90c:	71 09       	sbc	r23, r1

	//Set baud rate
	UBRR0H = (unsigned char) (temp_baud >> 8);
     90e:	bb 27       	eor	r27, r27
     910:	a7 2f       	mov	r26, r23
     912:	96 2f       	mov	r25, r22
     914:	85 2f       	mov	r24, r21
     916:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (unsigned char) temp_baud;
     91a:	40 93 c4 00 	sts	0x00C4, r20

	UCSR0A |= (1 << U2X0);
     91e:	e0 ec       	ldi	r30, 0xC0	; 192
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	82 60       	ori	r24, 0x02	; 2
     926:	80 83       	st	Z, r24

	UCSR0B |= (1 << RXEN0);	// Disable RX
     928:	e1 ec       	ldi	r30, 0xC1	; 193
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	80 61       	ori	r24, 0x10	; 16
     930:	80 83       	st	Z, r24

	DDRE |= (1 << PE1);			// Set TX as output
     932:	69 9a       	sbi	0x0d, 1	; 13
	DDRE &= ~(1 << PE0);		// Set RX as input
     934:	68 98       	cbi	0x0d, 0	; 13

	UCSR0B |= (1 << TXEN0);		//Enable TX
     936:	80 81       	ld	r24, Z
     938:	88 60       	ori	r24, 0x08	; 8
     93a:	80 83       	st	Z, r24
	UCSR0B &= ~(1 << UCSZ02);	//Data size
     93c:	80 81       	ld	r24, Z
     93e:	8b 7f       	andi	r24, 0xFB	; 251
     940:	80 83       	st	Z, r24

	// async, no parity, 1 stop bit, 8 bit data size
	UCSR0C &= ~(1 << 7);
     942:	e2 ec       	ldi	r30, 0xC2	; 194
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	80 81       	ld	r24, Z
     948:	8f 77       	andi	r24, 0x7F	; 127
     94a:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UMSEL0);
     94c:	80 81       	ld	r24, Z
     94e:	8f 7b       	andi	r24, 0xBF	; 191
     950:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UPM01) ;
     952:	80 81       	ld	r24, Z
     954:	8f 7d       	andi	r24, 0xDF	; 223
     956:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UPM00);
     958:	80 81       	ld	r24, Z
     95a:	8f 7e       	andi	r24, 0xEF	; 239
     95c:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << USBS0);
     95e:	80 81       	ld	r24, Z
     960:	87 7f       	andi	r24, 0xF7	; 247
     962:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << USBS0);
     964:	80 81       	ld	r24, Z
     966:	87 7f       	andi	r24, 0xF7	; 247
     968:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01);
     96a:	80 81       	ld	r24, Z
     96c:	84 60       	ori	r24, 0x04	; 4
     96e:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00);
     970:	80 81       	ld	r24, Z
     972:	82 60       	ori	r24, 0x02	; 2
     974:	80 83       	st	Z, r24
     976:	08 95       	ret

00000978 <USART0_transmit>:

}

void USART0_transmit(unsigned char data)
{
	while ( ! ( UCSR0A & (1<<UDRE0))); //Wait for empty transmit buffer
     978:	90 91 c0 00 	lds	r25, 0x00C0
     97c:	95 ff       	sbrs	r25, 5
     97e:	fc cf       	rjmp	.-8      	; 0x978 <USART0_transmit>

	UDR0 = data; //Put data into buffer, sends the data
     980:	80 93 c6 00 	sts	0x00C6, r24
     984:	08 95       	ret

00000986 <USART0_receive>:

}

unsigned char USART0_receive(void)
{
	while ( ! (UCSR0A & (1<<RXC0)));
     986:	80 91 c0 00 	lds	r24, 0x00C0
     98a:	87 ff       	sbrs	r24, 7
     98c:	fc cf       	rjmp	.-8      	; 0x986 <USART0_receive>

	return UDR0;
     98e:	80 91 c6 00 	lds	r24, 0x00C6
}
     992:	08 95       	ret

00000994 <CANbus_Init>:
#include "CanBus.h"

void CANbus_Init(void) {
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	cd b7       	in	r28, 0x3d	; 61
     99a:	de b7       	in	r29, 0x3e	; 62
     99c:	29 97       	sbiw	r28, 0x09	; 9
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	cd bf       	out	0x3d, r28	; 61

  can_init(CANBUS_BITRATE);
     9a8:	86 e0       	ldi	r24, 0x06	; 6
     9aa:	0e 94 55 07 	call	0xeaa	; 0xeaa <can_init>

  // CANbus filters Initialisation for id and mask
  can_filter_t filter = {
     9ae:	89 e0       	ldi	r24, 0x09	; 9
     9b0:	e3 e2       	ldi	r30, 0x23	; 35
     9b2:	f2 e0       	ldi	r31, 0x02	; 2
     9b4:	de 01       	movw	r26, r28
     9b6:	11 96       	adiw	r26, 0x01	; 1
     9b8:	01 90       	ld	r0, Z+
     9ba:	0d 92       	st	X+, r0
     9bc:	8a 95       	dec	r24
     9be:	e1 f7       	brne	.-8      	; 0x9b8 <CANbus_Init+0x24>
          .extended = 0x03
      }
  };

  // For all CANPAGE-s
  can_set_filter(0, &filter);
     9c0:	be 01       	movw	r22, r28
     9c2:	6f 5f       	subi	r22, 0xFF	; 255
     9c4:	7f 4f       	sbci	r23, 0xFF	; 255
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	0e 94 71 08 	call	0x10e2	; 0x10e2 <can_set_filter>

}
     9cc:	29 96       	adiw	r28, 0x09	; 9
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	de bf       	out	0x3e, r29	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	cd bf       	out	0x3d, r28	; 61
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <can_wrapper_init>:
#include "can_wrapper.h"

uint8_t can_wrapper_init(void) {
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	29 97       	sbiw	r28, 0x09	; 9
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	cd bf       	out	0x3d, r28	; 61
    uint8_t status;

    // Initialize MCP2515
    status = can_init(BITRATE_125_KBPS);
     9f4:	84 e0       	ldi	r24, 0x04	; 4
     9f6:	0e 94 55 07 	call	0xeaa	; 0xeaa <can_init>
     9fa:	18 2f       	mov	r17, r24

    // Set filter to receive all messages
    can_filter_t filter = {
     9fc:	be 01       	movw	r22, r28
     9fe:	6f 5f       	subi	r22, 0xFF	; 255
     a00:	7f 4f       	sbci	r23, 0xFF	; 255
     a02:	89 e0       	ldi	r24, 0x09	; 9
     a04:	fb 01       	movw	r30, r22
     a06:	11 92       	st	Z+, r1
     a08:	8a 95       	dec	r24
     a0a:	e9 f7       	brne	.-6      	; 0xa06 <can_wrapper_init+0x28>
        .flags = {
            .rtr = 0,
            .extended = 0
        }
    };
    can_set_filter(0, &filter);
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <can_set_filter>

    return status;
}
     a12:	81 2f       	mov	r24, r17
     a14:	29 96       	adiw	r28, 0x09	; 9
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	f8 94       	cli
     a1a:	de bf       	out	0x3e, r29	; 62
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	cd bf       	out	0x3d, r28	; 61
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	08 95       	ret

00000a28 <can_wrapper_send>:

uint8_t can_wrapper_send(uint32_t id, uint8_t length, ...) {
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	cd b7       	in	r28, 0x3d	; 61
     a2e:	de b7       	in	r29, 0x3e	; 62
     a30:	2e 97       	sbiw	r28, 0x0e	; 14
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	f8 94       	cli
     a36:	de bf       	out	0x3e, r29	; 62
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	cd bf       	out	0x3d, r28	; 61
     a3c:	9f 89       	ldd	r25, Y+23	; 0x17
    can_t msg;
    va_list pl;
    uint_fast8_t i;

    msg.id = id;
     a3e:	4b 89       	ldd	r20, Y+19	; 0x13
     a40:	5c 89       	ldd	r21, Y+20	; 0x14
     a42:	6d 89       	ldd	r22, Y+21	; 0x15
     a44:	7e 89       	ldd	r23, Y+22	; 0x16
     a46:	49 83       	std	Y+1, r20	; 0x01
     a48:	5a 83       	std	Y+2, r21	; 0x02
     a4a:	6b 83       	std	Y+3, r22	; 0x03
     a4c:	7c 83       	std	Y+4, r23	; 0x04
    msg.flags.rtr = 0;
     a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    msg.flags.extended = 1;
     a50:	8e 7f       	andi	r24, 0xFE	; 254
     a52:	82 60       	ori	r24, 0x02	; 2
     a54:	8d 83       	std	Y+5, r24	; 0x05
    msg.length = length;
     a56:	9e 83       	std	Y+6, r25	; 0x06
     a58:	de 01       	movw	r26, r28
     a5a:	58 96       	adiw	r26, 0x18	; 24
     a5c:	9e 01       	movw	r18, r28
     a5e:	29 5f       	subi	r18, 0xF9	; 249
     a60:	3f 4f       	sbci	r19, 0xFF	; 255

    va_start(pl, length);
    for (i = 0; i < length; i++) {
     a62:	f9 01       	movw	r30, r18
     a64:	8e 2f       	mov	r24, r30
     a66:	82 1b       	sub	r24, r18
     a68:	89 17       	cp	r24, r25
     a6a:	20 f4       	brcc	.+8      	; 0xa74 <can_wrapper_send+0x4c>
        uint8_t x = va_arg(pl, int);
     a6c:	8c 91       	ld	r24, X
     a6e:	12 96       	adiw	r26, 0x02	; 2
     a70:	81 93       	st	Z+, r24
     a72:	f8 cf       	rjmp	.-16     	; 0xa64 <can_wrapper_send+0x3c>
        msg.data[i] = x;
    }
    va_end(pl);

    return can_send_message(&msg);
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	0e 94 da 09 	call	0x13b4	; 0x13b4 <can_send_message>
}
     a7c:	2e 96       	adiw	r28, 0x0e	; 14
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	cd bf       	out	0x3d, r28	; 61
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <calculatechecksum>:
void rx_write(uint8_t c) {
	while(bit_is_clear(UCSR1A, UDRE1));
	UDR1 = c;
}

uint8_t calculatechecksum(volatile uint8_t* packet) {
     a8e:	fc 01       	movw	r30, r24
	uint16_t checksum = 0;
	
	for(uint8_t i = DYNAMIXEL_ID; i <= (packet[DYNAMIXEL_LENGTH] + 2); i++) {
     a90:	92 e0       	ldi	r25, 0x02	; 2
	while(bit_is_clear(UCSR1A, UDRE1));
	UDR1 = c;
}

uint8_t calculatechecksum(volatile uint8_t* packet) {
	uint16_t checksum = 0;
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	70 e0       	ldi	r23, 0x00	; 0
	
	for(uint8_t i = DYNAMIXEL_ID; i <= (packet[DYNAMIXEL_LENGTH] + 2); i++) {
     a96:	23 81       	ldd	r18, Z+3	; 0x03
     a98:	49 2f       	mov	r20, r25
     a9a:	50 e0       	ldi	r21, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	2e 5f       	subi	r18, 0xFE	; 254
     aa0:	3f 4f       	sbci	r19, 0xFF	; 255
     aa2:	24 17       	cp	r18, r20
     aa4:	35 07       	cpc	r19, r21
     aa6:	44 f0       	brlt	.+16     	; 0xab8 <calculatechecksum+0x2a>
		checksum += packet[i];
     aa8:	df 01       	movw	r26, r30
     aaa:	a4 0f       	add	r26, r20
     aac:	b5 1f       	adc	r27, r21
     aae:	8c 91       	ld	r24, X
     ab0:	68 0f       	add	r22, r24
     ab2:	71 1d       	adc	r23, r1
}

uint8_t calculatechecksum(volatile uint8_t* packet) {
	uint16_t checksum = 0;
	
	for(uint8_t i = DYNAMIXEL_ID; i <= (packet[DYNAMIXEL_LENGTH] + 2); i++) {
     ab4:	9f 5f       	subi	r25, 0xFF	; 255
     ab6:	ef cf       	rjmp	.-34     	; 0xa96 <calculatechecksum+0x8>
		checksum += packet[i];
	}
	
	return ~(checksum % 256);
}
     ab8:	86 2f       	mov	r24, r22
     aba:	80 95       	com	r24
     abc:	08 95       	ret

00000abe <readpacket>:
uint8_t readpacket(
	volatile uint8_t* rxpacket, 
	uint8_t packetlength, 
	volatile uint8_t* recv_buffer,
	volatile uint8_t* recv_buffer_index
	) {
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	d9 01       	movw	r26, r18
		
	uint16_t ulcounter = 0;
	size_t i;

	while(*recv_buffer_index < packetlength) {
     ac4:	ee ed       	ldi	r30, 0xDE	; 222
     ac6:	f5 e0       	ldi	r31, 0x05	; 5
     ac8:	3c 91       	ld	r19, X
     aca:	36 17       	cp	r19, r22
     acc:	48 f4       	brcc	.+18     	; 0xae0 <readpacket+0x22>
     ace:	31 97       	sbiw	r30, 0x01	; 1
		if(ulcounter++ > (DYNAMIXEL_TIMEOUT_MS) * 10) {
     ad0:	61 f1       	breq	.+88     	; 0xb2a <readpacket+0x6c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ad2:	cf e8       	ldi	r28, 0x8F	; 143
     ad4:	d1 e0       	ldi	r29, 0x01	; 1
     ad6:	21 97       	sbiw	r28, 0x01	; 1
     ad8:	f1 f7       	brne	.-4      	; 0xad6 <readpacket+0x18>
     ada:	00 c0       	rjmp	.+0      	; 0xadc <readpacket+0x1e>
     adc:	00 00       	nop
     ade:	f4 cf       	rjmp	.-24     	; 0xac8 <readpacket+0xa>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
		}
		_delay_us(100);
	}

	// Copy received packet to `rxpacket`
	for (i = 0; i < packetlength; i++) {
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	fc 01       	movw	r30, r24
     ae8:	26 17       	cp	r18, r22
     aea:	37 07       	cpc	r19, r23
     aec:	50 f4       	brcc	.+20     	; 0xb02 <readpacket+0x44>
     aee:	e2 0f       	add	r30, r18
     af0:	f3 1f       	adc	r31, r19
     af2:	da 01       	movw	r26, r20
     af4:	a2 0f       	add	r26, r18
     af6:	b3 1f       	adc	r27, r19
		rxpacket[i] = recv_buffer[i];
     af8:	ac 91       	ld	r26, X
     afa:	a0 83       	st	Z, r26
		}
		_delay_us(100);
	}

	// Copy received packet to `rxpacket`
	for (i = 0; i < packetlength; i++) {
     afc:	2f 5f       	subi	r18, 0xFF	; 255
     afe:	3f 4f       	sbci	r19, 0xFF	; 255
     b00:	f2 cf       	rjmp	.-28     	; 0xae6 <readpacket+0x28>
		rxpacket[i] = recv_buffer[i];
	}

	// Check if packet is corrupted
	if((rxpacket[0] != 255) || (rxpacket[1] != 255)) {
     b02:	20 81       	ld	r18, Z
     b04:	2f 3f       	cpi	r18, 0xFF	; 255
     b06:	11 f0       	breq	.+4      	; 0xb0c <readpacket+0x4e>
		return DYNAMIXEL_RX_CORRUPT;
     b08:	82 e0       	ldi	r24, 0x02	; 2
     b0a:	10 c0       	rjmp	.+32     	; 0xb2c <readpacket+0x6e>
	for (i = 0; i < packetlength; i++) {
		rxpacket[i] = recv_buffer[i];
	}

	// Check if packet is corrupted
	if((rxpacket[0] != 255) || (rxpacket[1] != 255)) {
     b0c:	21 81       	ldd	r18, Z+1	; 0x01
     b0e:	2f 3f       	cpi	r18, 0xFF	; 255
     b10:	d9 f7       	brne	.-10     	; 0xb08 <readpacket+0x4a>
		return DYNAMIXEL_RX_CORRUPT;
	}
		
	if(rxpacket[packetlength - 1] != calculatechecksum(rxpacket)) {
     b12:	61 50       	subi	r22, 0x01	; 1
     b14:	71 09       	sbc	r23, r1
     b16:	fc 01       	movw	r30, r24
     b18:	e6 0f       	add	r30, r22
     b1a:	f7 1f       	adc	r31, r23
     b1c:	c0 81       	ld	r28, Z
     b1e:	0e 94 47 05 	call	0xa8e	; 0xa8e <calculatechecksum>
     b22:	c8 13       	cpse	r28, r24
     b24:	f1 cf       	rjmp	.-30     	; 0xb08 <readpacket+0x4a>
		return DYNAMIXEL_RX_CORRUPT;
	}
	
	return DYNAMIXEL_SUCCESS;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <readpacket+0x6e>
	uint16_t ulcounter = 0;
	size_t i;

	while(*recv_buffer_index < packetlength) {
		if(ulcounter++ > (DYNAMIXEL_TIMEOUT_MS) * 10) {
			return DYNAMIXEL_RX_TIMEOUT;
     b2a:	83 e0       	ldi	r24, 0x03	; 3
	if(rxpacket[packetlength - 1] != calculatechecksum(rxpacket)) {
		return DYNAMIXEL_RX_CORRUPT;
	}
	
	return DYNAMIXEL_SUCCESS;
}
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	08 95       	ret

00000b32 <__vector_21>:
static volatile uint8_t rx_buffer[DYNAMIXEL_PACKET_SIZE];
static volatile uint8_t rx_buffer_index = 0;
static void rx_write(uint8_t c);


ISR(USART0_RX_vect) {
     b32:	1f 92       	push	r1
     b34:	0f 92       	push	r0
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	0f 92       	push	r0
     b3a:	11 24       	eor	r1, r1
     b3c:	0b b6       	in	r0, 0x3b	; 59
     b3e:	0f 92       	push	r0
     b40:	8f 93       	push	r24
     b42:	ef 93       	push	r30
     b44:	ff 93       	push	r31
	uint8_t data = UDR0;
     b46:	80 91 c6 00 	lds	r24, 0x00C6
	
	ax_buffer[ax_buffer_index] = data;
     b4a:	e0 91 69 03 	lds	r30, 0x0369
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	e6 59       	subi	r30, 0x96	; 150
     b52:	fc 4f       	sbci	r31, 0xFC	; 252
     b54:	80 83       	st	Z, r24
	if (ax_buffer_index < DYNAMIXEL_PACKET_SIZE - 1) {
     b56:	80 91 69 03 	lds	r24, 0x0369
     b5a:	8f 3f       	cpi	r24, 0xFF	; 255
     b5c:	29 f0       	breq	.+10     	; 0xb68 <__vector_21+0x36>
		ax_buffer_index++;
     b5e:	80 91 69 03 	lds	r24, 0x0369
     b62:	8f 5f       	subi	r24, 0xFF	; 255
     b64:	80 93 69 03 	sts	0x0369, r24
	}
	
	// Ignore garbage
	if (ax_buffer_index == 1 && ax_buffer[0] != 0xFF) {
     b68:	80 91 69 03 	lds	r24, 0x0369
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	31 f4       	brne	.+12     	; 0xb7c <__vector_21+0x4a>
     b70:	80 91 6a 03 	lds	r24, 0x036A
     b74:	8f 3f       	cpi	r24, 0xFF	; 255
     b76:	11 f0       	breq	.+4      	; 0xb7c <__vector_21+0x4a>
		ax_buffer_index = 0;
     b78:	10 92 69 03 	sts	0x0369, r1
	}
	if (ax_buffer_index == 3 && 
     b7c:	80 91 69 03 	lds	r24, 0x0369
     b80:	83 30       	cpi	r24, 0x03	; 3
     b82:	79 f4       	brne	.+30     	; 0xba2 <__vector_21+0x70>
		ax_buffer[0] == 0xFF && 
     b84:	80 91 6a 03 	lds	r24, 0x036A
	
	// Ignore garbage
	if (ax_buffer_index == 1 && ax_buffer[0] != 0xFF) {
		ax_buffer_index = 0;
	}
	if (ax_buffer_index == 3 && 
     b88:	8f 3f       	cpi	r24, 0xFF	; 255
     b8a:	59 f4       	brne	.+22     	; 0xba2 <__vector_21+0x70>
		ax_buffer[0] == 0xFF && 
		ax_buffer[1] == 0xFF && 
     b8c:	80 91 6b 03 	lds	r24, 0x036B
	// Ignore garbage
	if (ax_buffer_index == 1 && ax_buffer[0] != 0xFF) {
		ax_buffer_index = 0;
	}
	if (ax_buffer_index == 3 && 
		ax_buffer[0] == 0xFF && 
     b90:	8f 3f       	cpi	r24, 0xFF	; 255
     b92:	39 f4       	brne	.+14     	; 0xba2 <__vector_21+0x70>
		ax_buffer[1] == 0xFF && 
		ax_buffer[2] == 0xFF) {
     b94:	80 91 6c 03 	lds	r24, 0x036C
	if (ax_buffer_index == 1 && ax_buffer[0] != 0xFF) {
		ax_buffer_index = 0;
	}
	if (ax_buffer_index == 3 && 
		ax_buffer[0] == 0xFF && 
		ax_buffer[1] == 0xFF && 
     b98:	8f 3f       	cpi	r24, 0xFF	; 255
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__vector_21+0x70>
		ax_buffer[2] == 0xFF) {
		ax_buffer_index = 2;
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	80 93 69 03 	sts	0x0369, r24
	}
}
     ba2:	ff 91       	pop	r31
     ba4:	ef 91       	pop	r30
     ba6:	8f 91       	pop	r24
     ba8:	0f 90       	pop	r0
     baa:	0b be       	out	0x3b, r0	; 59
     bac:	0f 90       	pop	r0
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	0f 90       	pop	r0
     bb2:	1f 90       	pop	r1
     bb4:	18 95       	reti

00000bb6 <__vector_32>:

ISR(USART1_RX_vect) {
     bb6:	1f 92       	push	r1
     bb8:	0f 92       	push	r0
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	0f 92       	push	r0
     bbe:	11 24       	eor	r1, r1
     bc0:	0b b6       	in	r0, 0x3b	; 59
     bc2:	0f 92       	push	r0
     bc4:	8f 93       	push	r24
     bc6:	ef 93       	push	r30
     bc8:	ff 93       	push	r31
	rx_buffer[rx_buffer_index] = UDR1;
     bca:	e0 91 68 02 	lds	r30, 0x0268
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 91 ce 00 	lds	r24, 0x00CE
     bd4:	e7 59       	subi	r30, 0x97	; 151
     bd6:	fd 4f       	sbci	r31, 0xFD	; 253
     bd8:	80 83       	st	Z, r24
	if (rx_buffer_index < DYNAMIXEL_PACKET_SIZE - 1) {
     bda:	80 91 68 02 	lds	r24, 0x0268
     bde:	8f 3f       	cpi	r24, 0xFF	; 255
     be0:	29 f0       	breq	.+10     	; 0xbec <__vector_32+0x36>
		rx_buffer_index++;
     be2:	80 91 68 02 	lds	r24, 0x0268
     be6:	8f 5f       	subi	r24, 0xFF	; 255
     be8:	80 93 68 02 	sts	0x0268, r24
	}
	
	// Ignore garbage
	if (rx_buffer_index == 1 && rx_buffer[0] != 0xFF) {
     bec:	80 91 68 02 	lds	r24, 0x0268
     bf0:	81 30       	cpi	r24, 0x01	; 1
     bf2:	31 f4       	brne	.+12     	; 0xc00 <__vector_32+0x4a>
     bf4:	80 91 69 02 	lds	r24, 0x0269
     bf8:	8f 3f       	cpi	r24, 0xFF	; 255
     bfa:	11 f0       	breq	.+4      	; 0xc00 <__vector_32+0x4a>
		rx_buffer_index = 0;
     bfc:	10 92 68 02 	sts	0x0268, r1
	}
}
     c00:	ff 91       	pop	r31
     c02:	ef 91       	pop	r30
     c04:	8f 91       	pop	r24
     c06:	0f 90       	pop	r0
     c08:	0b be       	out	0x3b, r0	; 59
     c0a:	0f 90       	pop	r0
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	0f 90       	pop	r0
     c10:	1f 90       	pop	r1
     c12:	18 95       	reti

00000c14 <dynamixel_ax_init>:

void dynamixel_ax_init(void) {
	// Set UART baudrate
	UBRR0H = ((F_CPU / 8 + DYNAMIXEL_BAUDRATE / 2) / DYNAMIXEL_BAUDRATE - 1) >> 8;
     c14:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = ((F_CPU / 8 + DYNAMIXEL_BAUDRATE / 2) / DYNAMIXEL_BAUDRATE - 1);
     c18:	82 e2       	ldi	r24, 0x22	; 34
     c1a:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A |= (1 << U2X0);
     c1e:	e0 ec       	ldi	r30, 0xC0	; 192
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	82 60       	ori	r24, 0x02	; 2
     c26:	80 83       	st	Z, r24
	
	// Enable receiver and transmitter 
	UCSR0B |= (1 << TXEN0);
     c28:	e1 ec       	ldi	r30, 0xC1	; 193
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	88 60       	ori	r24, 0x08	; 8
     c30:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXEN0);
     c32:	80 81       	ld	r24, Z
     c34:	80 61       	ori	r24, 0x10	; 16
     c36:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);
     c38:	80 81       	ld	r24, Z
     c3a:	80 68       	ori	r24, 0x80	; 128
     c3c:	80 83       	st	Z, r24
	
	DDRE |= (1 << PE0);
     c3e:	68 9a       	sbi	0x0d, 0	; 13
	DDRE |= (1 << PE1);
     c40:	69 9a       	sbi	0x0d, 1	; 13
	
	// Reset rx index
	ax_buffer_index = 0;
     c42:	10 92 69 03 	sts	0x0369, r1
     c46:	08 95       	ret

00000c48 <dynamixel_rx_init>:
}

void dynamixel_rx_init(void) {
	// Set UART baudrate
	UBRR1H = ((F_CPU / 8 + DYNAMIXEL_BAUDRATE / 2) / DYNAMIXEL_BAUDRATE - 1) >> 8;
     c48:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = ((F_CPU / 8 + DYNAMIXEL_BAUDRATE / 2) / DYNAMIXEL_BAUDRATE - 1);
     c4c:	82 e2       	ldi	r24, 0x22	; 34
     c4e:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A |= (1 << U2X1);
     c52:	e8 ec       	ldi	r30, 0xC8	; 200
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	82 60       	ori	r24, 0x02	; 2
     c5a:	80 83       	st	Z, r24
	
	// Enable receiver and transmitter 
	UCSR1B |= (1 << TXEN1);
     c5c:	e9 ec       	ldi	r30, 0xC9	; 201
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	88 60       	ori	r24, 0x08	; 8
     c64:	80 83       	st	Z, r24
	UCSR1B |= (1 << RXEN1);
     c66:	80 81       	ld	r24, Z
     c68:	80 61       	ori	r24, 0x10	; 16
     c6a:	80 83       	st	Z, r24
	UCSR1B |= (1 << RXCIE1);
     c6c:	80 81       	ld	r24, Z
     c6e:	80 68       	ori	r24, 0x80	; 128
     c70:	80 83       	st	Z, r24
	
	DDRD |= (1 << PD2);
     c72:	52 9a       	sbi	0x0a, 2	; 10
	DDRD |= (1 << PD3);
     c74:	53 9a       	sbi	0x0a, 3	; 10
	DDRE |= (1 << PE2);
     c76:	6a 9a       	sbi	0x0d, 2	; 13
	
	PORTE |= (1 << PE2);
     c78:	72 9a       	sbi	0x0e, 2	; 14
	// Reset rx index
	rx_buffer_index = 0;
     c7a:	10 92 68 02 	sts	0x0268, r1
     c7e:	08 95       	ret

00000c80 <rx_setrx>:
	while(bit_is_clear(UCSR0A, UDRE0));
	UDR0 = c;
}

void rx_setrx(void) {
	while(bit_is_clear(UCSR1A, TXC1));
     c80:	80 91 c8 00 	lds	r24, 0x00C8
     c84:	86 ff       	sbrs	r24, 6
     c86:	fc cf       	rjmp	.-8      	; 0xc80 <rx_setrx>
	// PORTE &= ~(1 << PE2);
	rx_buffer_index = 0;
     c88:	10 92 68 02 	sts	0x0268, r1
     c8c:	08 95       	ret

00000c8e <rx_settx>:
}

void rx_settx(void) {
	//while(bit_is_clear(UCSR1A, TXC1));
	PORTE |= (1 << PE2);
     c8e:	72 9a       	sbi	0x0e, 2	; 14
     c90:	08 95       	ret

00000c92 <dynamixel_ax_txrx>:
	}
	
	return DYNAMIXEL_SUCCESS;
}

uint8_t dynamixel_ax_txrx(volatile uint8_t* txpacket, volatile uint8_t* rxpacket) {
     c92:	df 92       	push	r13
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	ec 01       	movw	r28, r24
     ca2:	7b 01       	movw	r14, r22
	uint8_t rxlength = 0;
	uint8_t txlength = txpacket[DYNAMIXEL_LENGTH] + 4;
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	94 e0       	ldi	r25, 0x04	; 4
     ca8:	d9 2e       	mov	r13, r25
     caa:	d8 0e       	add	r13, r24
	uint8_t status = DYNAMIXEL_SUCCESS;
	
	txpacket[0] = (uint8_t) 0xff;
     cac:	8f ef       	ldi	r24, 0xFF	; 255
     cae:	88 83       	st	Y, r24
	txpacket[1] = (uint8_t) 0xff;
     cb0:	89 83       	std	Y+1, r24	; 0x01
	txpacket[txlength - 1] = (uint8_t)calculatechecksum(txpacket);
     cb2:	0d 2d       	mov	r16, r13
     cb4:	10 e0       	ldi	r17, 0x00	; 0
     cb6:	01 50       	subi	r16, 0x01	; 1
     cb8:	11 09       	sbc	r17, r1
     cba:	0c 0f       	add	r16, r28
     cbc:	1d 1f       	adc	r17, r29
     cbe:	ce 01       	movw	r24, r28
     cc0:	0e 94 47 05 	call	0xa8e	; 0xa8e <calculatechecksum>
     cc4:	f8 01       	movw	r30, r16
     cc6:	80 83       	st	Z, r24
     cc8:	1a e0       	ldi	r17, 0x0A	; 10
     cca:	0c 2f       	mov	r16, r28
	// Reset rx index
	rx_buffer_index = 0;
}

void ax_settx(void) {
	UCSR0B &= ~(1 << RXEN0);	// Disable RX
     ccc:	80 91 c1 00 	lds	r24, 0x00C1
     cd0:	8f 7e       	andi	r24, 0xEF	; 239
     cd2:	80 93 c1 00 	sts	0x00C1, r24
	
	DDRE |= (1 << PE1);			// Set TX as output
     cd6:	69 9a       	sbi	0x0d, 1	; 13
	DDRE &= ~(1 << PE0);		// Set RX as input
     cd8:	68 98       	cbi	0x0d, 0	; 13
	
	UCSR0B |= (1 << TXEN0);		// Enable TX
     cda:	80 91 c1 00 	lds	r24, 0x00C1
     cde:	88 60       	ori	r24, 0x08	; 8
     ce0:	80 93 c1 00 	sts	0x00C1, r24
     ce4:	ec 2f       	mov	r30, r28
     ce6:	fd 2f       	mov	r31, r29
     ce8:	8e 2f       	mov	r24, r30
     cea:	80 1b       	sub	r24, r16
	txpacket[txlength - 1] = (uint8_t)calculatechecksum(txpacket);
	
	for (uint8_t i = 0; i < DYNAMIXEL_RETRY_COUNT; i++) {
		// Write packet	
		ax_settx();
		for(uint8_t i = 0; i < txlength; i++) {
     cec:	8d 15       	cp	r24, r13
     cee:	48 f4       	brcc	.+18     	; 0xd02 <dynamixel_ax_txrx+0x70>
			ax_write(txpacket[i]);
     cf0:	80 81       	ld	r24, Z
	//UCSR0B |= (1 << RXCIE0);	// Enable RX interrupt
	UCSR0B |= (1 << RXEN0);		// Enable RX	
}

void ax_write(uint8_t c) {
	while(bit_is_clear(UCSR0A, UDRE0));
     cf2:	90 91 c0 00 	lds	r25, 0x00C0
     cf6:	95 ff       	sbrs	r25, 5
     cf8:	fc cf       	rjmp	.-8      	; 0xcf2 <dynamixel_ax_txrx+0x60>
	UDR0 = c;
     cfa:	80 93 c6 00 	sts	0x00C6, r24
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	f3 cf       	rjmp	.-26     	; 0xce8 <dynamixel_ax_txrx+0x56>
}


void ax_setrx(void) {	
	// Wait for TX complete flag before turning the bus around
	while(bit_is_clear(UCSR0A, TXC0));
     d02:	80 91 c0 00 	lds	r24, 0x00C0
     d06:	86 ff       	sbrs	r24, 6
     d08:	fc cf       	rjmp	.-8      	; 0xd02 <dynamixel_ax_txrx+0x70>
	
	ax_buffer_index = 0;		// Reset RX index
     d0a:	10 92 69 03 	sts	0x0369, r1
	
	DDRE &= ~(1 << PE1);		// Set TX as input!
     d0e:	69 98       	cbi	0x0d, 1	; 13
	DDRE |= (1 << PE0);			// Set RX as output
     d10:	68 9a       	sbi	0x0d, 0	; 13
	
	UCSR0B &= ~(1 << TXEN0);	// Disable TX
     d12:	80 91 c1 00 	lds	r24, 0x00C1
     d16:	87 7f       	andi	r24, 0xF7	; 247
     d18:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0B |= (1 << RXCIE0);	// Enable RX interrupt
	UCSR0B |= (1 << RXEN0);		// Enable RX	
     d1c:	80 91 c1 00 	lds	r24, 0x00C1
     d20:	80 61       	ori	r24, 0x10	; 16
     d22:	80 93 c1 00 	sts	0x00C1, r24
		}
		ax_setrx();
		
		
		// Read response
		if(txpacket[DYNAMIXEL_ID] != DYNAMIXEL_BROADCAST_ID) {	
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	8e 3f       	cpi	r24, 0xFE	; 254
     d2a:	11 f4       	brne	.+4      	; 0xd30 <dynamixel_ax_txrx+0x9e>
			status = readpacket(rxpacket, rxlength, ax_buffer, &ax_buffer_index);
			if (status == DYNAMIXEL_SUCCESS) {
				return status;
			}
		} else {
			return DYNAMIXEL_SUCCESS;
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	13 c0       	rjmp	.+38     	; 0xd56 <dynamixel_ax_txrx+0xc4>
		ax_setrx();
		
		
		// Read response
		if(txpacket[DYNAMIXEL_ID] != DYNAMIXEL_BROADCAST_ID) {	
			if(txpacket[DYNAMIXEL_INSTRUCTION] == DYNAMIXEL_READ) {
     d30:	8c 81       	ldd	r24, Y+4	; 0x04
     d32:	82 30       	cpi	r24, 0x02	; 2
     d34:	19 f4       	brne	.+6      	; 0xd3c <dynamixel_ax_txrx+0xaa>
				rxlength = txpacket[DYNAMIXEL_PARAMETER + 1] + 6;
     d36:	6e 81       	ldd	r22, Y+6	; 0x06
     d38:	6a 5f       	subi	r22, 0xFA	; 250
     d3a:	01 c0       	rjmp	.+2      	; 0xd3e <dynamixel_ax_txrx+0xac>
			}
			else {
				rxlength = 6;
     d3c:	66 e0       	ldi	r22, 0x06	; 6
			}
			
			status = readpacket(rxpacket, rxlength, ax_buffer, &ax_buffer_index);
     d3e:	29 e6       	ldi	r18, 0x69	; 105
     d40:	33 e0       	ldi	r19, 0x03	; 3
     d42:	4a e6       	ldi	r20, 0x6A	; 106
     d44:	53 e0       	ldi	r21, 0x03	; 3
     d46:	c7 01       	movw	r24, r14
     d48:	0e 94 5f 05 	call	0xabe	; 0xabe <readpacket>
			if (status == DYNAMIXEL_SUCCESS) {
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	71 f3       	breq	.-36     	; 0xd2c <dynamixel_ax_txrx+0x9a>
     d50:	11 50       	subi	r17, 0x01	; 1
	
	txpacket[0] = (uint8_t) 0xff;
	txpacket[1] = (uint8_t) 0xff;
	txpacket[txlength - 1] = (uint8_t)calculatechecksum(txpacket);
	
	for (uint8_t i = 0; i < DYNAMIXEL_RETRY_COUNT; i++) {
     d52:	09 f0       	breq	.+2      	; 0xd56 <dynamixel_ax_txrx+0xc4>
     d54:	bb cf       	rjmp	.-138    	; 0xccc <dynamixel_ax_txrx+0x3a>
			return DYNAMIXEL_SUCCESS;
		}
	}
		
	return status;
}
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	ff 90       	pop	r15
     d60:	ef 90       	pop	r14
     d62:	df 90       	pop	r13
     d64:	08 95       	ret

00000d66 <dynamixel_rx_txrx>:

uint8_t dynamixel_rx_txrx(volatile uint8_t* txpacket, volatile uint8_t* rxpacket) {
     d66:	df 92       	push	r13
     d68:	ef 92       	push	r14
     d6a:	ff 92       	push	r15
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	ec 01       	movw	r28, r24
     d76:	7b 01       	movw	r14, r22
	uint8_t rxlength = 0;
	uint8_t txlength = txpacket[DYNAMIXEL_LENGTH] + 4;
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	94 e0       	ldi	r25, 0x04	; 4
     d7c:	d9 2e       	mov	r13, r25
     d7e:	d8 0e       	add	r13, r24
	
	txpacket[0] = (uint8_t) 0xff;
     d80:	8f ef       	ldi	r24, 0xFF	; 255
     d82:	88 83       	st	Y, r24
	txpacket[1] = (uint8_t) 0xff;
     d84:	89 83       	std	Y+1, r24	; 0x01
	txpacket[txlength - 1] = (uint8_t)calculatechecksum(txpacket);
     d86:	0d 2d       	mov	r16, r13
     d88:	10 e0       	ldi	r17, 0x00	; 0
     d8a:	01 50       	subi	r16, 0x01	; 1
     d8c:	11 09       	sbc	r17, r1
     d8e:	0c 0f       	add	r16, r28
     d90:	1d 1f       	adc	r17, r29
     d92:	ce 01       	movw	r24, r28
     d94:	0e 94 47 05 	call	0xa8e	; 0xa8e <calculatechecksum>
     d98:	f8 01       	movw	r30, r16
     d9a:	80 83       	st	Z, r24
	
	rx_settx();
     d9c:	0e 94 47 06 	call	0xc8e	; 0xc8e <rx_settx>
     da0:	9c 2f       	mov	r25, r28
	// Write packet	
	for(uint8_t i = 0; i < txlength; i++) {
     da2:	ec 2f       	mov	r30, r28
     da4:	fd 2f       	mov	r31, r29
     da6:	8e 2f       	mov	r24, r30
     da8:	89 1b       	sub	r24, r25
     daa:	8d 15       	cp	r24, r13
     dac:	48 f4       	brcc	.+18     	; 0xdc0 <dynamixel_rx_txrx+0x5a>
		rx_write(txpacket[i]);
     dae:	80 81       	ld	r24, Z
	//while(bit_is_clear(UCSR1A, TXC1));
	PORTE |= (1 << PE2);
}

void rx_write(uint8_t c) {
	while(bit_is_clear(UCSR1A, UDRE1));
     db0:	20 91 c8 00 	lds	r18, 0x00C8
     db4:	25 ff       	sbrs	r18, 5
     db6:	fc cf       	rjmp	.-8      	; 0xdb0 <dynamixel_rx_txrx+0x4a>
	UDR1 = c;
     db8:	80 93 ce 00 	sts	0x00CE, r24
     dbc:	31 96       	adiw	r30, 0x01	; 1
     dbe:	f3 cf       	rjmp	.-26     	; 0xda6 <dynamixel_rx_txrx+0x40>
	rx_settx();
	// Write packet	
	for(uint8_t i = 0; i < txlength; i++) {
		rx_write(txpacket[i]);
	}
	rx_setrx();
     dc0:	0e 94 40 06 	call	0xc80	; 0xc80 <rx_setrx>
	
	// Read response
	if(txpacket[DYNAMIXEL_ID] != DYNAMIXEL_BROADCAST_ID) {	
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	8e 3f       	cpi	r24, 0xFE	; 254
     dc8:	a9 f0       	breq	.+42     	; 0xdf4 <dynamixel_rx_txrx+0x8e>
		if(txpacket[DYNAMIXEL_INSTRUCTION] == DYNAMIXEL_READ) {
     dca:	8c 81       	ldd	r24, Y+4	; 0x04
     dcc:	82 30       	cpi	r24, 0x02	; 2
     dce:	19 f4       	brne	.+6      	; 0xdd6 <dynamixel_rx_txrx+0x70>
			rxlength = txpacket[DYNAMIXEL_PARAMETER + 1] + 6;
     dd0:	6e 81       	ldd	r22, Y+6	; 0x06
     dd2:	6a 5f       	subi	r22, 0xFA	; 250
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <dynamixel_rx_txrx+0x72>
		}
		else {
			rxlength = 6;
     dd6:	66 e0       	ldi	r22, 0x06	; 6
		}
		return readpacket(rxpacket, rxlength, rx_buffer, &rx_buffer_index);
     dd8:	28 e6       	ldi	r18, 0x68	; 104
     dda:	32 e0       	ldi	r19, 0x02	; 2
     ddc:	49 e6       	ldi	r20, 0x69	; 105
     dde:	52 e0       	ldi	r21, 0x02	; 2
     de0:	c7 01       	movw	r24, r14
	}
		
	return DYNAMIXEL_SUCCESS;
}
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	ff 90       	pop	r15
     dec:	ef 90       	pop	r14
     dee:	df 90       	pop	r13
			rxlength = txpacket[DYNAMIXEL_PARAMETER + 1] + 6;
		}
		else {
			rxlength = 6;
		}
		return readpacket(rxpacket, rxlength, rx_buffer, &rx_buffer_index);
     df0:	0c 94 5f 05 	jmp	0xabe	; 0xabe <readpacket>
	}
		
	return DYNAMIXEL_SUCCESS;
}
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	ff 90       	pop	r15
     e00:	ef 90       	pop	r14
     e02:	df 90       	pop	r13
     e04:	08 95       	ret

00000e06 <_find_free_mob>:
     e06:	80 91 6a 04 	lds	r24, 0x046A
     e0a:	88 23       	and	r24, r24
     e0c:	11 f0       	breq	.+4      	; 0xe12 <_find_free_mob+0xc>
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	08 95       	ret
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 93 ed 00 	sts	0x00ED, r25
     e1a:	20 91 ef 00 	lds	r18, 0x00EF
     e1e:	20 7c       	andi	r18, 0xC0	; 192
     e20:	29 f0       	breq	.+10     	; 0xe2c <_find_free_mob+0x26>
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	90 5f       	subi	r25, 0xF0	; 240
     e26:	8f 30       	cpi	r24, 0x0F	; 15
     e28:	b1 f7       	brne	.-20     	; 0xe16 <_find_free_mob+0x10>
     e2a:	f1 cf       	rjmp	.-30     	; 0xe0e <_find_free_mob+0x8>
     e2c:	08 95       	ret

00000e2e <_disable_mob_interrupt>:
     e2e:	88 30       	cpi	r24, 0x08	; 8
     e30:	80 f4       	brcc	.+32     	; 0xe52 <_disable_mob_interrupt+0x24>
     e32:	40 91 de 00 	lds	r20, 0x00DE
     e36:	21 e0       	ldi	r18, 0x01	; 1
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	b9 01       	movw	r22, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <_disable_mob_interrupt+0x14>
     e3e:	66 0f       	add	r22, r22
     e40:	77 1f       	adc	r23, r23
     e42:	8a 95       	dec	r24
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <_disable_mob_interrupt+0x10>
     e46:	cb 01       	movw	r24, r22
     e48:	80 95       	com	r24
     e4a:	84 23       	and	r24, r20
     e4c:	80 93 de 00 	sts	0x00DE, r24
     e50:	08 95       	ret
     e52:	30 91 df 00 	lds	r19, 0x00DF
     e56:	28 ef       	ldi	r18, 0xF8	; 248
     e58:	28 0f       	add	r18, r24
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	01 c0       	rjmp	.+2      	; 0xe62 <_disable_mob_interrupt+0x34>
     e60:	88 0f       	add	r24, r24
     e62:	2a 95       	dec	r18
     e64:	ea f7       	brpl	.-6      	; 0xe60 <_disable_mob_interrupt+0x32>
     e66:	80 95       	com	r24
     e68:	83 23       	and	r24, r19
     e6a:	80 93 df 00 	sts	0x00DF, r24
     e6e:	08 95       	ret

00000e70 <_enable_mob_interrupt>:
     e70:	88 30       	cpi	r24, 0x08	; 8
     e72:	68 f4       	brcc	.+26     	; 0xe8e <_enable_mob_interrupt+0x1e>
     e74:	90 91 de 00 	lds	r25, 0x00DE
     e78:	21 e0       	ldi	r18, 0x01	; 1
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	01 c0       	rjmp	.+2      	; 0xe80 <_enable_mob_interrupt+0x10>
     e7e:	22 0f       	add	r18, r18
     e80:	8a 95       	dec	r24
     e82:	ea f7       	brpl	.-6      	; 0xe7e <_enable_mob_interrupt+0xe>
     e84:	89 2f       	mov	r24, r25
     e86:	82 2b       	or	r24, r18
     e88:	80 93 de 00 	sts	0x00DE, r24
     e8c:	08 95       	ret
     e8e:	90 91 df 00 	lds	r25, 0x00DF
     e92:	88 50       	subi	r24, 0x08	; 8
     e94:	21 e0       	ldi	r18, 0x01	; 1
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <_enable_mob_interrupt+0x2c>
     e9a:	22 0f       	add	r18, r18
     e9c:	8a 95       	dec	r24
     e9e:	ea f7       	brpl	.-6      	; 0xe9a <_enable_mob_interrupt+0x2a>
     ea0:	89 2f       	mov	r24, r25
     ea2:	82 2b       	or	r24, r18
     ea4:	80 93 df 00 	sts	0x00DF, r24
     ea8:	08 95       	ret

00000eaa <can_init>:
     eaa:	88 30       	cpi	r24, 0x08	; 8
     eac:	08 f0       	brcs	.+2      	; 0xeb0 <can_init+0x6>
     eae:	39 c0       	rjmp	.+114    	; 0xf22 <can_init+0x78>
     eb0:	90 91 d8 00 	lds	r25, 0x00D8
     eb4:	91 60       	ori	r25, 0x01	; 1
     eb6:	90 93 d8 00 	sts	0x00D8, r25
     eba:	23 e0       	ldi	r18, 0x03	; 3
     ebc:	82 9f       	mul	r24, r18
     ebe:	c0 01       	movw	r24, r0
     ec0:	11 24       	eor	r1, r1
     ec2:	fc 01       	movw	r30, r24
     ec4:	ec 56       	subi	r30, 0x6C	; 108
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	e4 91       	lpm	r30, Z
     eca:	e0 93 e2 00 	sts	0x00E2, r30
     ece:	fc 01       	movw	r30, r24
     ed0:	eb 56       	subi	r30, 0x6B	; 107
     ed2:	ff 4f       	sbci	r31, 0xFF	; 255
     ed4:	e4 91       	lpm	r30, Z
     ed6:	e0 93 e3 00 	sts	0x00E3, r30
     eda:	8a 56       	subi	r24, 0x6A	; 106
     edc:	9f 4f       	sbci	r25, 0xFF	; 255
     ede:	fc 01       	movw	r30, r24
     ee0:	84 91       	lpm	r24, Z
     ee2:	80 93 e4 00 	sts	0x00E4, r24
     ee6:	10 92 da 00 	sts	0x00DA, r1
     eea:	80 eb       	ldi	r24, 0xB0	; 176
     eec:	80 93 db 00 	sts	0x00DB, r24
     ef0:	87 ec       	ldi	r24, 0xC7	; 199
     ef2:	80 93 e5 00 	sts	0x00E5, r24
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	0e 94 23 08 	call	0x1046	; 0x1046 <can_disable_filter>
     efc:	41 ee       	ldi	r20, 0xE1	; 225
     efe:	54 e0       	ldi	r21, 0x04	; 4
     f00:	60 e1       	ldi	r22, 0x10	; 16
     f02:	81 ec       	ldi	r24, 0xC1	; 193
     f04:	95 e0       	ldi	r25, 0x05	; 5
     f06:	0e 94 b3 0a 	call	0x1566	; 0x1566 <can_buffer_init>
     f0a:	4b e6       	ldi	r20, 0x6B	; 107
     f0c:	54 e0       	ldi	r21, 0x04	; 4
     f0e:	68 e0       	ldi	r22, 0x08	; 8
     f10:	8b ed       	ldi	r24, 0xDB	; 219
     f12:	94 e0       	ldi	r25, 0x04	; 4
     f14:	0e 94 b3 0a 	call	0x1566	; 0x1566 <can_buffer_init>
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	80 93 d8 00 	sts	0x00D8, r24
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	08 95       	ret
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	08 95       	ret

00000f26 <__vector_18>:
     f26:	1f 92       	push	r1
     f28:	0f 92       	push	r0
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	0f 92       	push	r0
     f2e:	11 24       	eor	r1, r1
     f30:	0b b6       	in	r0, 0x3b	; 59
     f32:	0f 92       	push	r0
     f34:	2f 93       	push	r18
     f36:	3f 93       	push	r19
     f38:	4f 93       	push	r20
     f3a:	5f 93       	push	r21
     f3c:	6f 93       	push	r22
     f3e:	7f 93       	push	r23
     f40:	8f 93       	push	r24
     f42:	9f 93       	push	r25
     f44:	af 93       	push	r26
     f46:	bf 93       	push	r27
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	ef 93       	push	r30
     f4e:	ff 93       	push	r31
     f50:	80 91 ec 00 	lds	r24, 0x00EC
     f54:	80 7f       	andi	r24, 0xF0	; 240
     f56:	80 3f       	cpi	r24, 0xF0	; 240
     f58:	09 f4       	brne	.+2      	; 0xf5c <__vector_18+0x36>
     f5a:	58 c0       	rjmp	.+176    	; 0x100c <__vector_18+0xe6>
     f5c:	c0 91 ed 00 	lds	r28, 0x00ED
     f60:	80 91 ec 00 	lds	r24, 0x00EC
     f64:	80 7f       	andi	r24, 0xF0	; 240
     f66:	80 93 ed 00 	sts	0x00ED, r24
     f6a:	d0 91 ec 00 	lds	r29, 0x00EC
     f6e:	80 91 ee 00 	lds	r24, 0x00EE
     f72:	86 ff       	sbrs	r24, 6
     f74:	36 c0       	rjmp	.+108    	; 0xfe2 <__vector_18+0xbc>
     f76:	80 91 ee 00 	lds	r24, 0x00EE
     f7a:	10 92 ee 00 	sts	0x00EE, r1
     f7e:	10 92 ef 00 	sts	0x00EF, r1
     f82:	8b ed       	ldi	r24, 0xDB	; 219
     f84:	94 e0       	ldi	r25, 0x04	; 4
     f86:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <can_buffer_get_dequeue_ptr>
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	61 f0       	breq	.+24     	; 0xfa6 <__vector_18+0x80>
     f8e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <at90can_copy_message_to_mob>
     f92:	8b ed       	ldi	r24, 0xDB	; 219
     f94:	94 e0       	ldi	r25, 0x04	; 4
     f96:	0e 94 0b 0b 	call	0x1616	; 0x1616 <can_buffer_dequeue>
     f9a:	80 91 ef 00 	lds	r24, 0x00EF
     f9e:	80 64       	ori	r24, 0x40	; 64
     fa0:	80 93 ef 00 	sts	0x00EF, r24
     fa4:	07 c0       	rjmp	.+14     	; 0xfb4 <__vector_18+0x8e>
     fa6:	8d 2f       	mov	r24, r29
     fa8:	82 95       	swap	r24
     faa:	8f 70       	andi	r24, 0x0F	; 15
     fac:	0e 94 17 07 	call	0xe2e	; 0xe2e <_disable_mob_interrupt>
     fb0:	10 92 6a 04 	sts	0x046A, r1
     fb4:	c0 93 ed 00 	sts	0x00ED, r28
     fb8:	ff 91       	pop	r31
     fba:	ef 91       	pop	r30
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	bf 91       	pop	r27
     fc2:	af 91       	pop	r26
     fc4:	9f 91       	pop	r25
     fc6:	8f 91       	pop	r24
     fc8:	7f 91       	pop	r23
     fca:	6f 91       	pop	r22
     fcc:	5f 91       	pop	r21
     fce:	4f 91       	pop	r20
     fd0:	3f 91       	pop	r19
     fd2:	2f 91       	pop	r18
     fd4:	0f 90       	pop	r0
     fd6:	0b be       	out	0x3b, r0	; 59
     fd8:	0f 90       	pop	r0
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	0f 90       	pop	r0
     fde:	1f 90       	pop	r1
     fe0:	18 95       	reti
     fe2:	81 ec       	ldi	r24, 0xC1	; 193
     fe4:	95 e0       	ldi	r25, 0x05	; 5
     fe6:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <can_buffer_get_enqueue_ptr>
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	31 f0       	breq	.+12     	; 0xffa <__vector_18+0xd4>
     fee:	0e 94 0b 0a 	call	0x1416	; 0x1416 <at90can_copy_mob_to_message>
     ff2:	81 ec       	ldi	r24, 0xC1	; 193
     ff4:	95 e0       	ldi	r25, 0x05	; 5
     ff6:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <can_buffer_enqueue>
     ffa:	80 91 ee 00 	lds	r24, 0x00EE
     ffe:	10 92 ee 00 	sts	0x00EE, r1
    1002:	80 91 ef 00 	lds	r24, 0x00EF
    1006:	80 71       	andi	r24, 0x10	; 16
    1008:	80 68       	ori	r24, 0x80	; 128
    100a:	ca cf       	rjmp	.-108    	; 0xfa0 <__vector_18+0x7a>
    100c:	80 91 da 00 	lds	r24, 0x00DA
    1010:	80 93 da 00 	sts	0x00DA, r24
    1014:	d1 cf       	rjmp	.-94     	; 0xfb8 <__vector_18+0x92>

00001016 <__vector_19>:
    1016:	1f 92       	push	r1
    1018:	0f 92       	push	r0
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	0f 92       	push	r0
    101e:	11 24       	eor	r1, r1
    1020:	0f 90       	pop	r0
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	0f 90       	pop	r0
    1026:	1f 90       	pop	r1
    1028:	18 95       	reti

0000102a <can_check_message>:
    102a:	81 ec       	ldi	r24, 0xC1	; 193
    102c:	95 e0       	ldi	r25, 0x05	; 5
    102e:	0e 94 be 0a 	call	0x157c	; 0x157c <can_buffer_empty>
    1032:	91 e0       	ldi	r25, 0x01	; 1
    1034:	89 27       	eor	r24, r25
    1036:	08 95       	ret

00001038 <can_check_free_buffer>:
    1038:	8b ed       	ldi	r24, 0xDB	; 219
    103a:	94 e0       	ldi	r25, 0x04	; 4
    103c:	0e 94 c7 0a 	call	0x158e	; 0x158e <can_buffer_full>
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	89 27       	eor	r24, r25
    1044:	08 95       	ret

00001046 <can_disable_filter>:
    1046:	cf 93       	push	r28
    1048:	8f 30       	cpi	r24, 0x0F	; 15
    104a:	c0 f0       	brcs	.+48     	; 0x107c <can_disable_filter+0x36>
    104c:	8f 3f       	cpi	r24, 0xFF	; 255
    104e:	09 f0       	breq	.+2      	; 0x1052 <can_disable_filter+0xc>
    1050:	46 c0       	rjmp	.+140    	; 0x10de <can_disable_filter+0x98>
    1052:	10 92 df 00 	sts	0x00DF, r1
    1056:	10 92 de 00 	sts	0x00DE, r1
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	80 93 ed 00 	sts	0x00ED, r24
    1060:	90 91 ef 00 	lds	r25, 0x00EF
    1064:	10 92 ef 00 	sts	0x00EF, r1
    1068:	90 91 ee 00 	lds	r25, 0x00EE
    106c:	10 92 ee 00 	sts	0x00EE, r1
    1070:	80 5f       	subi	r24, 0xF0	; 240
    1072:	80 3f       	cpi	r24, 0xF0	; 240
    1074:	99 f7       	brne	.-26     	; 0x105c <can_disable_filter+0x16>
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	cf 91       	pop	r28
    107a:	08 95       	ret
    107c:	90 e8       	ldi	r25, 0x80	; 128
    107e:	90 93 d8 00 	sts	0x00D8, r25
    1082:	90 91 d9 00 	lds	r25, 0x00D9
    1086:	93 fd       	sbrc	r25, 3
    1088:	fc cf       	rjmp	.-8      	; 0x1082 <can_disable_filter+0x3c>
    108a:	10 92 d8 00 	sts	0x00D8, r1
    108e:	90 91 d9 00 	lds	r25, 0x00D9
    1092:	c9 2f       	mov	r28, r25
    1094:	c4 70       	andi	r28, 0x04	; 4
    1096:	92 fd       	sbrc	r25, 2
    1098:	fa cf       	rjmp	.-12     	; 0x108e <can_disable_filter+0x48>
    109a:	98 2f       	mov	r25, r24
    109c:	92 95       	swap	r25
    109e:	90 7f       	andi	r25, 0xF0	; 240
    10a0:	90 93 ed 00 	sts	0x00ED, r25
    10a4:	90 91 ee 00 	lds	r25, 0x00EE
    10a8:	10 92 ee 00 	sts	0x00EE, r1
    10ac:	10 92 ef 00 	sts	0x00EF, r1
    10b0:	0e 94 17 07 	call	0xe2e	; 0xe2e <_disable_mob_interrupt>
    10b4:	80 91 ed 00 	lds	r24, 0x00ED
    10b8:	c0 93 ed 00 	sts	0x00ED, r28
    10bc:	90 91 ef 00 	lds	r25, 0x00EF
    10c0:	90 93 ef 00 	sts	0x00EF, r25
    10c4:	c0 5f       	subi	r28, 0xF0	; 240
    10c6:	c0 3f       	cpi	r28, 0xF0	; 240
    10c8:	b9 f7       	brne	.-18     	; 0x10b8 <can_disable_filter+0x72>
    10ca:	80 93 ed 00 	sts	0x00ED, r24
    10ce:	82 e0       	ldi	r24, 0x02	; 2
    10d0:	80 93 d8 00 	sts	0x00D8, r24
    10d4:	80 91 d9 00 	lds	r24, 0x00D9
    10d8:	82 ff       	sbrs	r24, 2
    10da:	fc cf       	rjmp	.-8      	; 0x10d4 <can_disable_filter+0x8e>
    10dc:	cc cf       	rjmp	.-104    	; 0x1076 <can_disable_filter+0x30>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	cb cf       	rjmp	.-106    	; 0x1078 <can_disable_filter+0x32>

000010e2 <can_set_filter>:
    10e2:	cf 93       	push	r28
    10e4:	fb 01       	movw	r30, r22
    10e6:	8f 30       	cpi	r24, 0x0F	; 15
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <can_set_filter+0xa>
    10ea:	da c0       	rjmp	.+436    	; 0x12a0 <__stack+0x1a1>
    10ec:	90 e8       	ldi	r25, 0x80	; 128
    10ee:	90 93 d8 00 	sts	0x00D8, r25
    10f2:	90 91 d9 00 	lds	r25, 0x00D9
    10f6:	93 fd       	sbrc	r25, 3
    10f8:	fc cf       	rjmp	.-8      	; 0x10f2 <can_set_filter+0x10>
    10fa:	10 92 d8 00 	sts	0x00D8, r1
    10fe:	90 91 d9 00 	lds	r25, 0x00D9
    1102:	c9 2f       	mov	r28, r25
    1104:	c4 70       	andi	r28, 0x04	; 4
    1106:	92 fd       	sbrc	r25, 2
    1108:	fa cf       	rjmp	.-12     	; 0x10fe <can_set_filter+0x1c>
    110a:	98 2f       	mov	r25, r24
    110c:	92 95       	swap	r25
    110e:	90 7f       	andi	r25, 0xF0	; 240
    1110:	90 93 ed 00 	sts	0x00ED, r25
    1114:	10 92 ee 00 	sts	0x00EE, r1
    1118:	10 92 ef 00 	sts	0x00EF, r1
    111c:	90 85       	ldd	r25, Z+8	; 0x08
    111e:	9c 70       	andi	r25, 0x0C	; 12
    1120:	9c 30       	cpi	r25, 0x0C	; 12
    1122:	09 f0       	breq	.+2      	; 0x1126 <__stack+0x27>
    1124:	8f c0       	rjmp	.+286    	; 0x1244 <__stack+0x145>
    1126:	90 81       	ld	r25, Z
    1128:	99 0f       	add	r25, r25
    112a:	99 0f       	add	r25, r25
    112c:	99 0f       	add	r25, r25
    112e:	90 93 f0 00 	sts	0x00F0, r25
    1132:	40 81       	ld	r20, Z
    1134:	51 81       	ldd	r21, Z+1	; 0x01
    1136:	62 81       	ldd	r22, Z+2	; 0x02
    1138:	73 81       	ldd	r23, Z+3	; 0x03
    113a:	a5 e0       	ldi	r26, 0x05	; 5
    113c:	76 95       	lsr	r23
    113e:	67 95       	ror	r22
    1140:	57 95       	ror	r21
    1142:	47 95       	ror	r20
    1144:	aa 95       	dec	r26
    1146:	d1 f7       	brne	.-12     	; 0x113c <__stack+0x3d>
    1148:	40 93 f1 00 	sts	0x00F1, r20
    114c:	40 81       	ld	r20, Z
    114e:	51 81       	ldd	r21, Z+1	; 0x01
    1150:	62 81       	ldd	r22, Z+2	; 0x02
    1152:	73 81       	ldd	r23, Z+3	; 0x03
    1154:	bd e0       	ldi	r27, 0x0D	; 13
    1156:	76 95       	lsr	r23
    1158:	67 95       	ror	r22
    115a:	57 95       	ror	r21
    115c:	47 95       	ror	r20
    115e:	ba 95       	dec	r27
    1160:	d1 f7       	brne	.-12     	; 0x1156 <__stack+0x57>
    1162:	40 93 f2 00 	sts	0x00F2, r20
    1166:	40 81       	ld	r20, Z
    1168:	51 81       	ldd	r21, Z+1	; 0x01
    116a:	62 81       	ldd	r22, Z+2	; 0x02
    116c:	73 81       	ldd	r23, Z+3	; 0x03
    116e:	95 e1       	ldi	r25, 0x15	; 21
    1170:	76 95       	lsr	r23
    1172:	67 95       	ror	r22
    1174:	57 95       	ror	r21
    1176:	47 95       	ror	r20
    1178:	9a 95       	dec	r25
    117a:	d1 f7       	brne	.-12     	; 0x1170 <__stack+0x71>
    117c:	40 93 f3 00 	sts	0x00F3, r20
    1180:	24 81       	ldd	r18, Z+4	; 0x04
    1182:	98 e0       	ldi	r25, 0x08	; 8
    1184:	29 9f       	mul	r18, r25
    1186:	90 01       	movw	r18, r0
    1188:	11 24       	eor	r1, r1
    118a:	21 60       	ori	r18, 0x01	; 1
    118c:	20 93 f4 00 	sts	0x00F4, r18
    1190:	44 81       	ldd	r20, Z+4	; 0x04
    1192:	55 81       	ldd	r21, Z+5	; 0x05
    1194:	66 81       	ldd	r22, Z+6	; 0x06
    1196:	77 81       	ldd	r23, Z+7	; 0x07
    1198:	25 e0       	ldi	r18, 0x05	; 5
    119a:	76 95       	lsr	r23
    119c:	67 95       	ror	r22
    119e:	57 95       	ror	r21
    11a0:	47 95       	ror	r20
    11a2:	2a 95       	dec	r18
    11a4:	d1 f7       	brne	.-12     	; 0x119a <__stack+0x9b>
    11a6:	40 93 f5 00 	sts	0x00F5, r20
    11aa:	44 81       	ldd	r20, Z+4	; 0x04
    11ac:	55 81       	ldd	r21, Z+5	; 0x05
    11ae:	66 81       	ldd	r22, Z+6	; 0x06
    11b0:	77 81       	ldd	r23, Z+7	; 0x07
    11b2:	3d e0       	ldi	r19, 0x0D	; 13
    11b4:	76 95       	lsr	r23
    11b6:	67 95       	ror	r22
    11b8:	57 95       	ror	r21
    11ba:	47 95       	ror	r20
    11bc:	3a 95       	dec	r19
    11be:	d1 f7       	brne	.-12     	; 0x11b4 <__stack+0xb5>
    11c0:	40 93 f6 00 	sts	0x00F6, r20
    11c4:	44 81       	ldd	r20, Z+4	; 0x04
    11c6:	55 81       	ldd	r21, Z+5	; 0x05
    11c8:	66 81       	ldd	r22, Z+6	; 0x06
    11ca:	77 81       	ldd	r23, Z+7	; 0x07
    11cc:	a5 e1       	ldi	r26, 0x15	; 21
    11ce:	76 95       	lsr	r23
    11d0:	67 95       	ror	r22
    11d2:	57 95       	ror	r21
    11d4:	47 95       	ror	r20
    11d6:	aa 95       	dec	r26
    11d8:	d1 f7       	brne	.-12     	; 0x11ce <__stack+0xcf>
    11da:	40 93 f7 00 	sts	0x00F7, r20
    11de:	90 91 ef 00 	lds	r25, 0x00EF
    11e2:	90 61       	ori	r25, 0x10	; 16
    11e4:	90 93 ef 00 	sts	0x00EF, r25
    11e8:	90 85       	ldd	r25, Z+8	; 0x08
    11ea:	91 ff       	sbrs	r25, 1
    11ec:	0d c0       	rjmp	.+26     	; 0x1208 <__stack+0x109>
    11ee:	90 91 f4 00 	lds	r25, 0x00F4
    11f2:	94 60       	ori	r25, 0x04	; 4
    11f4:	90 93 f4 00 	sts	0x00F4, r25
    11f8:	90 85       	ldd	r25, Z+8	; 0x08
    11fa:	90 ff       	sbrs	r25, 0
    11fc:	05 c0       	rjmp	.+10     	; 0x1208 <__stack+0x109>
    11fe:	90 91 f0 00 	lds	r25, 0x00F0
    1202:	94 60       	ori	r25, 0x04	; 4
    1204:	90 93 f0 00 	sts	0x00F0, r25
    1208:	90 91 ef 00 	lds	r25, 0x00EF
    120c:	90 68       	ori	r25, 0x80	; 128
    120e:	90 93 ef 00 	sts	0x00EF, r25
    1212:	0e 94 38 07 	call	0xe70	; 0xe70 <_enable_mob_interrupt>
    1216:	80 91 ed 00 	lds	r24, 0x00ED
    121a:	c0 93 ed 00 	sts	0x00ED, r28
    121e:	90 91 ef 00 	lds	r25, 0x00EF
    1222:	90 93 ef 00 	sts	0x00EF, r25
    1226:	c0 5f       	subi	r28, 0xF0	; 240
    1228:	c0 3f       	cpi	r28, 0xF0	; 240
    122a:	b9 f7       	brne	.-18     	; 0x121a <__stack+0x11b>
    122c:	80 93 ed 00 	sts	0x00ED, r24
    1230:	82 e0       	ldi	r24, 0x02	; 2
    1232:	80 93 d8 00 	sts	0x00D8, r24
    1236:	80 91 d9 00 	lds	r24, 0x00D9
    123a:	82 ff       	sbrs	r24, 2
    123c:	fc cf       	rjmp	.-8      	; 0x1236 <__stack+0x137>
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	cf 91       	pop	r28
    1242:	08 95       	ret
    1244:	10 92 f0 00 	sts	0x00F0, r1
    1248:	10 92 f1 00 	sts	0x00F1, r1
    124c:	90 81       	ld	r25, Z
    124e:	92 95       	swap	r25
    1250:	99 0f       	add	r25, r25
    1252:	90 7e       	andi	r25, 0xE0	; 224
    1254:	90 93 f2 00 	sts	0x00F2, r25
    1258:	20 81       	ld	r18, Z
    125a:	31 81       	ldd	r19, Z+1	; 0x01
    125c:	43 e0       	ldi	r20, 0x03	; 3
    125e:	36 95       	lsr	r19
    1260:	27 95       	ror	r18
    1262:	4a 95       	dec	r20
    1264:	e1 f7       	brne	.-8      	; 0x125e <__stack+0x15f>
    1266:	20 93 f3 00 	sts	0x00F3, r18
    126a:	90 85       	ldd	r25, Z+8	; 0x08
    126c:	9c 70       	andi	r25, 0x0C	; 12
    126e:	a9 f0       	breq	.+42     	; 0x129a <__stack+0x19b>
    1270:	91 e0       	ldi	r25, 0x01	; 1
    1272:	90 93 f4 00 	sts	0x00F4, r25
    1276:	10 92 f5 00 	sts	0x00F5, r1
    127a:	94 81       	ldd	r25, Z+4	; 0x04
    127c:	92 95       	swap	r25
    127e:	99 0f       	add	r25, r25
    1280:	90 7e       	andi	r25, 0xE0	; 224
    1282:	90 93 f6 00 	sts	0x00F6, r25
    1286:	24 81       	ldd	r18, Z+4	; 0x04
    1288:	35 81       	ldd	r19, Z+5	; 0x05
    128a:	93 e0       	ldi	r25, 0x03	; 3
    128c:	36 95       	lsr	r19
    128e:	27 95       	ror	r18
    1290:	9a 95       	dec	r25
    1292:	e1 f7       	brne	.-8      	; 0x128c <__stack+0x18d>
    1294:	20 93 f7 00 	sts	0x00F7, r18
    1298:	a7 cf       	rjmp	.-178    	; 0x11e8 <__stack+0xe9>
    129a:	10 92 f4 00 	sts	0x00F4, r1
    129e:	eb cf       	rjmp	.-42     	; 0x1276 <__stack+0x177>
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	ce cf       	rjmp	.-100    	; 0x1240 <__stack+0x141>

000012a4 <at90can_copy_message_to_mob>:
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <at90can_copy_message_to_mob+0x6>
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <at90can_copy_message_to_mob+0x8>
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	fc 01       	movw	r30, r24
    12b2:	85 81       	ldd	r24, Z+5	; 0x05
    12b4:	80 93 ef 00 	sts	0x00EF, r24
    12b8:	84 81       	ldd	r24, Z+4	; 0x04
    12ba:	81 ff       	sbrs	r24, 1
    12bc:	32 c0       	rjmp	.+100    	; 0x1322 <at90can_copy_message_to_mob+0x7e>
    12be:	80 91 ef 00 	lds	r24, 0x00EF
    12c2:	80 61       	ori	r24, 0x10	; 16
    12c4:	80 93 ef 00 	sts	0x00EF, r24
    12c8:	80 81       	ld	r24, Z
    12ca:	88 0f       	add	r24, r24
    12cc:	88 0f       	add	r24, r24
    12ce:	88 0f       	add	r24, r24
    12d0:	80 93 f0 00 	sts	0x00F0, r24
    12d4:	80 81       	ld	r24, Z
    12d6:	91 81       	ldd	r25, Z+1	; 0x01
    12d8:	a2 81       	ldd	r26, Z+2	; 0x02
    12da:	b3 81       	ldd	r27, Z+3	; 0x03
    12dc:	33 e0       	ldi	r19, 0x03	; 3
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	aa 1f       	adc	r26, r26
    12e4:	bb 1f       	adc	r27, r27
    12e6:	3a 95       	dec	r19
    12e8:	d1 f7       	brne	.-12     	; 0x12de <at90can_copy_message_to_mob+0x3a>
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	9a 83       	std	Y+2, r25	; 0x02
    12ee:	ab 83       	std	Y+3, r26	; 0x03
    12f0:	bc 83       	std	Y+4, r27	; 0x04
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	80 93 f1 00 	sts	0x00F1, r24
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	80 93 f2 00 	sts	0x00F2, r24
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	80 93 f3 00 	sts	0x00F3, r24
    1304:	84 81       	ldd	r24, Z+4	; 0x04
    1306:	80 ff       	sbrs	r24, 0
    1308:	1e c0       	rjmp	.+60     	; 0x1346 <at90can_copy_message_to_mob+0xa2>
    130a:	80 91 f0 00 	lds	r24, 0x00F0
    130e:	84 60       	ori	r24, 0x04	; 4
    1310:	80 93 f0 00 	sts	0x00F0, r24
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	08 95       	ret
    1322:	10 92 f0 00 	sts	0x00F0, r1
    1326:	10 92 f1 00 	sts	0x00F1, r1
    132a:	80 81       	ld	r24, Z
    132c:	82 95       	swap	r24
    132e:	88 0f       	add	r24, r24
    1330:	80 7e       	andi	r24, 0xE0	; 224
    1332:	80 93 f2 00 	sts	0x00F2, r24
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	23 e0       	ldi	r18, 0x03	; 3
    133c:	96 95       	lsr	r25
    133e:	87 95       	ror	r24
    1340:	2a 95       	dec	r18
    1342:	e1 f7       	brne	.-8      	; 0x133c <at90can_copy_message_to_mob+0x98>
    1344:	dd cf       	rjmp	.-70     	; 0x1300 <at90can_copy_message_to_mob+0x5c>
    1346:	9f 01       	movw	r18, r30
    1348:	2a 5f       	subi	r18, 0xFA	; 250
    134a:	3f 4f       	sbci	r19, 0xFF	; 255
    134c:	d9 01       	movw	r26, r18
    134e:	95 81       	ldd	r25, Z+5	; 0x05
    1350:	8a 2f       	mov	r24, r26
    1352:	82 1b       	sub	r24, r18
    1354:	89 17       	cp	r24, r25
    1356:	f0 f6       	brcc	.-68     	; 0x1314 <at90can_copy_message_to_mob+0x70>
    1358:	8d 91       	ld	r24, X+
    135a:	80 93 fa 00 	sts	0x00FA, r24
    135e:	f7 cf       	rjmp	.-18     	; 0x134e <at90can_copy_message_to_mob+0xaa>

00001360 <at90can_send_message>:
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	8c 01       	movw	r16, r24
    1368:	0e 94 03 07 	call	0xe06	; 0xe06 <_find_free_mob>
    136c:	c8 2f       	mov	r28, r24
    136e:	8f 30       	cpi	r24, 0x0F	; 15
    1370:	f8 f4       	brcc	.+62     	; 0x13b0 <at90can_send_message+0x50>
    1372:	82 95       	swap	r24
    1374:	80 7f       	andi	r24, 0xF0	; 240
    1376:	80 93 ed 00 	sts	0x00ED, r24
    137a:	80 91 ee 00 	lds	r24, 0x00EE
    137e:	10 92 ee 00 	sts	0x00EE, r1
    1382:	c8 01       	movw	r24, r16
    1384:	0e 94 52 09 	call	0x12a4	; 0x12a4 <at90can_copy_message_to_mob>
    1388:	8c 2f       	mov	r24, r28
    138a:	0e 94 38 07 	call	0xe70	; 0xe70 <_enable_mob_interrupt>
    138e:	8f b7       	in	r24, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	90 93 6a 04 	sts	0x046A, r25
    1398:	8f bf       	out	0x3f, r24	; 63
    139a:	80 91 ef 00 	lds	r24, 0x00EF
    139e:	80 64       	ori	r24, 0x40	; 64
    13a0:	80 93 ef 00 	sts	0x00EF, r24
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	8c 0f       	add	r24, r28
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	08 95       	ret
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	fa cf       	rjmp	.-12     	; 0x13a8 <at90can_send_message+0x48>

000013b4 <can_send_message>:
    13b4:	1f 93       	push	r17
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	ec 01       	movw	r28, r24
    13bc:	80 91 6a 04 	lds	r24, 0x046A
    13c0:	88 23       	and	r24, r24
    13c2:	e1 f0       	breq	.+56     	; 0x13fc <can_send_message+0x48>
    13c4:	8b ed       	ldi	r24, 0xDB	; 219
    13c6:	94 e0       	ldi	r25, 0x04	; 4
    13c8:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <can_buffer_get_enqueue_ptr>
    13cc:	dc 01       	movw	r26, r24
    13ce:	89 2b       	or	r24, r25
    13d0:	d9 f0       	breq	.+54     	; 0x1408 <can_send_message+0x54>
    13d2:	9e e0       	ldi	r25, 0x0E	; 14
    13d4:	fe 01       	movw	r30, r28
    13d6:	01 90       	ld	r0, Z+
    13d8:	0d 92       	st	X+, r0
    13da:	9a 95       	dec	r25
    13dc:	e1 f7       	brne	.-8      	; 0x13d6 <can_send_message+0x22>
    13de:	1f b7       	in	r17, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 91 6a 04 	lds	r25, 0x046A
    13e8:	99 23       	and	r25, r25
    13ea:	29 f0       	breq	.+10     	; 0x13f6 <can_send_message+0x42>
    13ec:	8b ed       	ldi	r24, 0xDB	; 219
    13ee:	94 e0       	ldi	r25, 0x04	; 4
    13f0:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <can_buffer_enqueue>
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	1f bf       	out	0x3f, r17	; 63
    13f8:	81 11       	cpse	r24, r1
    13fa:	0b c0       	rjmp	.+22     	; 0x1412 <can_send_message+0x5e>
    13fc:	ce 01       	movw	r24, r28
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	1f 91       	pop	r17
    1404:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <at90can_send_message>
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	1f 91       	pop	r17
    1410:	08 95       	ret
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	fa cf       	rjmp	.-12     	; 0x140a <can_send_message+0x56>

00001416 <at90can_copy_mob_to_message>:
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	00 d0       	rcall	.+0      	; 0x141c <at90can_copy_mob_to_message+0x6>
    141c:	00 d0       	rcall	.+0      	; 0x141e <at90can_copy_mob_to_message+0x8>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	fc 01       	movw	r30, r24
    1424:	90 91 ef 00 	lds	r25, 0x00EF
    1428:	89 2f       	mov	r24, r25
    142a:	8f 70       	andi	r24, 0x0F	; 15
    142c:	85 83       	std	Z+5, r24	; 0x05
    142e:	84 81       	ldd	r24, Z+4	; 0x04
    1430:	94 ff       	sbrs	r25, 4
    1432:	2c c0       	rjmp	.+88     	; 0x148c <at90can_copy_mob_to_message+0x76>
    1434:	90 91 f0 00 	lds	r25, 0x00F0
    1438:	99 83       	std	Y+1, r25	; 0x01
    143a:	90 91 f1 00 	lds	r25, 0x00F1
    143e:	9a 83       	std	Y+2, r25	; 0x02
    1440:	90 91 f2 00 	lds	r25, 0x00F2
    1444:	9b 83       	std	Y+3, r25	; 0x03
    1446:	90 91 f3 00 	lds	r25, 0x00F3
    144a:	9c 83       	std	Y+4, r25	; 0x04
    144c:	49 81       	ldd	r20, Y+1	; 0x01
    144e:	5a 81       	ldd	r21, Y+2	; 0x02
    1450:	6b 81       	ldd	r22, Y+3	; 0x03
    1452:	7c 81       	ldd	r23, Y+4	; 0x04
    1454:	93 e0       	ldi	r25, 0x03	; 3
    1456:	76 95       	lsr	r23
    1458:	67 95       	ror	r22
    145a:	57 95       	ror	r21
    145c:	47 95       	ror	r20
    145e:	9a 95       	dec	r25
    1460:	d1 f7       	brne	.-12     	; 0x1456 <at90can_copy_mob_to_message+0x40>
    1462:	40 83       	st	Z, r20
    1464:	51 83       	std	Z+1, r21	; 0x01
    1466:	62 83       	std	Z+2, r22	; 0x02
    1468:	73 83       	std	Z+3, r23	; 0x03
    146a:	82 60       	ori	r24, 0x02	; 2
    146c:	84 83       	std	Z+4, r24	; 0x04
    146e:	90 91 f0 00 	lds	r25, 0x00F0
    1472:	84 81       	ldd	r24, Z+4	; 0x04
    1474:	92 ff       	sbrs	r25, 2
    1476:	1e c0       	rjmp	.+60     	; 0x14b4 <at90can_copy_mob_to_message+0x9e>
    1478:	81 60       	ori	r24, 0x01	; 1
    147a:	84 83       	std	Z+4, r24	; 0x04
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	08 95       	ret
    148c:	90 91 f2 00 	lds	r25, 0x00F2
    1490:	92 95       	swap	r25
    1492:	96 95       	lsr	r25
    1494:	97 70       	andi	r25, 0x07	; 7
    1496:	40 91 f3 00 	lds	r20, 0x00F3
    149a:	28 e0       	ldi	r18, 0x08	; 8
    149c:	42 9f       	mul	r20, r18
    149e:	a0 01       	movw	r20, r0
    14a0:	11 24       	eor	r1, r1
    14a2:	49 2b       	or	r20, r25
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	40 83       	st	Z, r20
    14aa:	51 83       	std	Z+1, r21	; 0x01
    14ac:	62 83       	std	Z+2, r22	; 0x02
    14ae:	73 83       	std	Z+3, r23	; 0x03
    14b0:	8d 7f       	andi	r24, 0xFD	; 253
    14b2:	dc cf       	rjmp	.-72     	; 0x146c <at90can_copy_mob_to_message+0x56>
    14b4:	8e 7f       	andi	r24, 0xFE	; 254
    14b6:	84 83       	std	Z+4, r24	; 0x04
    14b8:	9f 01       	movw	r18, r30
    14ba:	2a 5f       	subi	r18, 0xFA	; 250
    14bc:	3f 4f       	sbci	r19, 0xFF	; 255
    14be:	d9 01       	movw	r26, r18
    14c0:	95 81       	ldd	r25, Z+5	; 0x05
    14c2:	8a 2f       	mov	r24, r26
    14c4:	82 1b       	sub	r24, r18
    14c6:	89 17       	cp	r24, r25
    14c8:	c8 f6       	brcc	.-78     	; 0x147c <at90can_copy_mob_to_message+0x66>
    14ca:	80 91 fa 00 	lds	r24, 0x00FA
    14ce:	8d 93       	st	X+, r24
    14d0:	f7 cf       	rjmp	.-18     	; 0x14c0 <at90can_copy_mob_to_message+0xaa>

000014d2 <at90can_get_message>:
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	8c 01       	movw	r16, r24
    14da:	0e 94 15 08 	call	0x102a	; 0x102a <can_check_message>
    14de:	81 11       	cpse	r24, r1
    14e0:	05 c0       	rjmp	.+10     	; 0x14ec <at90can_get_message+0x1a>
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	08 95       	ret
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	c0 e0       	ldi	r28, 0x00	; 0
    14f0:	80 93 ed 00 	sts	0x00ED, r24
    14f4:	90 91 ee 00 	lds	r25, 0x00EE
    14f8:	95 ff       	sbrs	r25, 5
    14fa:	16 c0       	rjmp	.+44     	; 0x1528 <at90can_get_message+0x56>
    14fc:	80 91 ee 00 	lds	r24, 0x00EE
    1500:	10 92 ee 00 	sts	0x00EE, r1
    1504:	c8 01       	movw	r24, r16
    1506:	0e 94 0b 0a 	call	0x1416	; 0x1416 <at90can_copy_mob_to_message>
    150a:	18 2f       	mov	r17, r24
    150c:	8c 2f       	mov	r24, r28
    150e:	0e 94 38 07 	call	0xe70	; 0xe70 <_enable_mob_interrupt>
    1512:	80 91 ef 00 	lds	r24, 0x00EF
    1516:	80 71       	andi	r24, 0x10	; 16
    1518:	80 68       	ori	r24, 0x80	; 128
    151a:	80 93 ef 00 	sts	0x00EF, r24
    151e:	11 23       	and	r17, r17
    1520:	01 f3       	breq	.-64     	; 0x14e2 <at90can_get_message+0x10>
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	8c 0f       	add	r24, r28
    1526:	de cf       	rjmp	.-68     	; 0x14e4 <at90can_get_message+0x12>
    1528:	cf 5f       	subi	r28, 0xFF	; 255
    152a:	80 5f       	subi	r24, 0xF0	; 240
    152c:	cf 30       	cpi	r28, 0x0F	; 15
    152e:	01 f7       	brne	.-64     	; 0x14f0 <at90can_get_message+0x1e>
    1530:	d8 cf       	rjmp	.-80     	; 0x14e2 <at90can_get_message+0x10>

00001532 <can_get_message>:
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	ec 01       	movw	r28, r24
    1538:	81 ec       	ldi	r24, 0xC1	; 193
    153a:	95 e0       	ldi	r25, 0x05	; 5
    153c:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <can_buffer_get_dequeue_ptr>
    1540:	fc 01       	movw	r30, r24
    1542:	89 2b       	or	r24, r25
    1544:	71 f0       	breq	.+28     	; 0x1562 <can_get_message+0x30>
    1546:	9e e0       	ldi	r25, 0x0E	; 14
    1548:	de 01       	movw	r26, r28
    154a:	01 90       	ld	r0, Z+
    154c:	0d 92       	st	X+, r0
    154e:	9a 95       	dec	r25
    1550:	e1 f7       	brne	.-8      	; 0x154a <can_get_message+0x18>
    1552:	81 ec       	ldi	r24, 0xC1	; 193
    1554:	95 e0       	ldi	r25, 0x05	; 5
    1556:	0e 94 0b 0b 	call	0x1616	; 0x1616 <can_buffer_dequeue>
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	08 95       	ret
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	fb cf       	rjmp	.-10     	; 0x155c <can_get_message+0x2a>

00001566 <can_buffer_init>:
    1566:	fc 01       	movw	r30, r24
    1568:	8f b7       	in	r24, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	62 83       	std	Z+2, r22	; 0x02
    156e:	51 83       	std	Z+1, r21	; 0x01
    1570:	40 83       	st	Z, r20
    1572:	14 82       	std	Z+4, r1	; 0x04
    1574:	15 82       	std	Z+5, r1	; 0x05
    1576:	13 82       	std	Z+3, r1	; 0x03
    1578:	8f bf       	out	0x3f, r24	; 63
    157a:	08 95       	ret

0000157c <can_buffer_empty>:
    157c:	2f b7       	in	r18, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	fc 01       	movw	r30, r24
    1582:	93 81       	ldd	r25, Z+3	; 0x03
    1584:	2f bf       	out	0x3f, r18	; 63
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	91 11       	cpse	r25, r1
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	08 95       	ret

0000158e <can_buffer_full>:
    158e:	3f b7       	in	r19, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	fc 01       	movw	r30, r24
    1594:	23 81       	ldd	r18, Z+3	; 0x03
    1596:	92 81       	ldd	r25, Z+2	; 0x02
    1598:	3f bf       	out	0x3f, r19	; 63
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	29 17       	cp	r18, r25
    159e:	08 f4       	brcc	.+2      	; 0x15a2 <can_buffer_full+0x14>
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	08 95       	ret

000015a4 <can_buffer_get_enqueue_ptr>:
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	ec 01       	movw	r28, r24
    15aa:	0e 94 c7 0a 	call	0x158e	; 0x158e <can_buffer_full>
    15ae:	81 11       	cpse	r24, r1
    15b0:	0b c0       	rjmp	.+22     	; 0x15c8 <can_buffer_get_enqueue_ptr+0x24>
    15b2:	2c 81       	ldd	r18, Y+4	; 0x04
    15b4:	88 81       	ld	r24, Y
    15b6:	99 81       	ldd	r25, Y+1	; 0x01
    15b8:	3e e0       	ldi	r19, 0x0E	; 14
    15ba:	23 9f       	mul	r18, r19
    15bc:	80 0d       	add	r24, r0
    15be:	91 1d       	adc	r25, r1
    15c0:	11 24       	eor	r1, r1
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	08 95       	ret
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	fa cf       	rjmp	.-12     	; 0x15c2 <can_buffer_get_enqueue_ptr+0x1e>

000015ce <can_buffer_enqueue>:
    15ce:	fc 01       	movw	r30, r24
    15d0:	9f b7       	in	r25, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	83 81       	ldd	r24, Z+3	; 0x03
    15d6:	8f 5f       	subi	r24, 0xFF	; 255
    15d8:	83 83       	std	Z+3, r24	; 0x03
    15da:	84 81       	ldd	r24, Z+4	; 0x04
    15dc:	8f 5f       	subi	r24, 0xFF	; 255
    15de:	84 83       	std	Z+4, r24	; 0x04
    15e0:	22 81       	ldd	r18, Z+2	; 0x02
    15e2:	82 17       	cp	r24, r18
    15e4:	08 f0       	brcs	.+2      	; 0x15e8 <can_buffer_enqueue+0x1a>
    15e6:	14 82       	std	Z+4, r1	; 0x04
    15e8:	9f bf       	out	0x3f, r25	; 63
    15ea:	08 95       	ret

000015ec <can_buffer_get_dequeue_ptr>:
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	ec 01       	movw	r28, r24
    15f2:	0e 94 be 0a 	call	0x157c	; 0x157c <can_buffer_empty>
    15f6:	81 11       	cpse	r24, r1
    15f8:	0b c0       	rjmp	.+22     	; 0x1610 <can_buffer_get_dequeue_ptr+0x24>
    15fa:	2d 81       	ldd	r18, Y+5	; 0x05
    15fc:	88 81       	ld	r24, Y
    15fe:	99 81       	ldd	r25, Y+1	; 0x01
    1600:	3e e0       	ldi	r19, 0x0E	; 14
    1602:	23 9f       	mul	r18, r19
    1604:	80 0d       	add	r24, r0
    1606:	91 1d       	adc	r25, r1
    1608:	11 24       	eor	r1, r1
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	08 95       	ret
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	fa cf       	rjmp	.-12     	; 0x160a <can_buffer_get_dequeue_ptr+0x1e>

00001616 <can_buffer_dequeue>:
    1616:	fc 01       	movw	r30, r24
    1618:	9f b7       	in	r25, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	83 81       	ldd	r24, Z+3	; 0x03
    161e:	81 50       	subi	r24, 0x01	; 1
    1620:	83 83       	std	Z+3, r24	; 0x03
    1622:	85 81       	ldd	r24, Z+5	; 0x05
    1624:	8f 5f       	subi	r24, 0xFF	; 255
    1626:	85 83       	std	Z+5, r24	; 0x05
    1628:	22 81       	ldd	r18, Z+2	; 0x02
    162a:	82 17       	cp	r24, r18
    162c:	08 f0       	brcs	.+2      	; 0x1630 <can_buffer_dequeue+0x1a>
    162e:	15 82       	std	Z+5, r1	; 0x05
    1630:	9f bf       	out	0x3f, r25	; 63
    1632:	08 95       	ret

00001634 <main>:
#include "CanBus.h"
#include "Uart.h"
#include "AX12.h"


int main() {
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	2e 97       	sbiw	r28, 0x0e	; 14
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61

	/* UART0 for DEBUG Initialisation */
	USART0_init(57600);
#endif

	sei();
    1648:	78 94       	sei

	/*	AX12 Servos Initialisation	*/
	AX12_InitAll();
    164a:	0e 94 07 03 	call	0x60e	; 0x60e <AX12_InitAll>

	/*	Binary Sensors Initalisation	*/
	BinarySensor_Add(&Pin_C6, 1);
    164e:	61 e0       	ldi	r22, 0x01	; 1
    1650:	86 e3       	ldi	r24, 0x36	; 54
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	0e 94 84 02 	call	0x508	; 0x508 <BinarySensor_Add>
	BinarySensor_Add(&Pin_C7, 2);
    1658:	62 e0       	ldi	r22, 0x02	; 2
    165a:	8d e2       	ldi	r24, 0x2D	; 45
    165c:	91 e0       	ldi	r25, 0x01	; 1
    165e:	0e 94 84 02 	call	0x508	; 0x508 <BinarySensor_Add>
	BinarySensor_Add(&Pin_A7, 3);
    1662:	63 e0       	ldi	r22, 0x03	; 3
    1664:	8b ea       	ldi	r24, 0xAB	; 171
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	0e 94 84 02 	call	0x508	; 0x508 <BinarySensor_Add>
	BinarySensor_Add(&Pin_A6, 4);
    166c:	64 e0       	ldi	r22, 0x04	; 4
    166e:	84 eb       	ldi	r24, 0xB4	; 180
    1670:	91 e0       	ldi	r25, 0x01	; 1
    1672:	0e 94 84 02 	call	0x508	; 0x508 <BinarySensor_Add>
	/* Brushless EDF Initialisation on pin */
	//Brushless_Init(&Pin_B5);


	/* CANbus Initialisation */
	CANbus_Init();
    1676:	0e 94 ca 04 	call	0x994	; 0x994 <CANbus_Init>
	USART0_transmit('k');
#endif

  while(1) {

		BinarySensor_UpdateAll();
    167a:	0e 94 a8 02 	call	0x550	; 0x550 <BinarySensor_UpdateAll>

		if (can_check_message()) {
    167e:	0e 94 15 08 	call	0x102a	; 0x102a <can_check_message>
    1682:	88 23       	and	r24, r24
    1684:	d1 f3       	breq	.-12     	; 0x167a <main+0x46>
			can_t msg;

			if (can_get_message(&msg)) {
    1686:	ce 01       	movw	r24, r28
    1688:	01 96       	adiw	r24, 0x01	; 1
    168a:	0e 94 99 0a 	call	0x1532	; 0x1532 <can_get_message>
    168e:	88 23       	and	r24, r24
    1690:	a1 f3       	breq	.-24     	; 0x167a <main+0x46>

				if(AX12_OnMessage(&msg) == true) continue;
    1692:	ce 01       	movw	r24, r28
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	0e 94 09 03 	call	0x612	; 0x612 <AX12_OnMessage>
    169a:	ef cf       	rjmp	.-34     	; 0x167a <main+0x46>

0000169c <__subsf3>:
    169c:	50 58       	subi	r21, 0x80	; 128

0000169e <__addsf3>:
    169e:	bb 27       	eor	r27, r27
    16a0:	aa 27       	eor	r26, r26
    16a2:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__addsf3x>
    16a6:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <__fp_round>
    16aa:	0e 94 30 0c 	call	0x1860	; 0x1860 <__fp_pscA>
    16ae:	38 f0       	brcs	.+14     	; 0x16be <__addsf3+0x20>
    16b0:	0e 94 37 0c 	call	0x186e	; 0x186e <__fp_pscB>
    16b4:	20 f0       	brcs	.+8      	; 0x16be <__addsf3+0x20>
    16b6:	39 f4       	brne	.+14     	; 0x16c6 <__addsf3+0x28>
    16b8:	9f 3f       	cpi	r25, 0xFF	; 255
    16ba:	19 f4       	brne	.+6      	; 0x16c2 <__addsf3+0x24>
    16bc:	26 f4       	brtc	.+8      	; 0x16c6 <__addsf3+0x28>
    16be:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_nan>
    16c2:	0e f4       	brtc	.+2      	; 0x16c6 <__addsf3+0x28>
    16c4:	e0 95       	com	r30
    16c6:	e7 fb       	bst	r30, 7
    16c8:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__fp_inf>

000016cc <__addsf3x>:
    16cc:	e9 2f       	mov	r30, r25
    16ce:	0e 94 4f 0c 	call	0x189e	; 0x189e <__fp_split3>
    16d2:	58 f3       	brcs	.-42     	; 0x16aa <__addsf3+0xc>
    16d4:	ba 17       	cp	r27, r26
    16d6:	62 07       	cpc	r22, r18
    16d8:	73 07       	cpc	r23, r19
    16da:	84 07       	cpc	r24, r20
    16dc:	95 07       	cpc	r25, r21
    16de:	20 f0       	brcs	.+8      	; 0x16e8 <__addsf3x+0x1c>
    16e0:	79 f4       	brne	.+30     	; 0x1700 <__addsf3x+0x34>
    16e2:	a6 f5       	brtc	.+104    	; 0x174c <__addsf3x+0x80>
    16e4:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__fp_zero>
    16e8:	0e f4       	brtc	.+2      	; 0x16ec <__addsf3x+0x20>
    16ea:	e0 95       	com	r30
    16ec:	0b 2e       	mov	r0, r27
    16ee:	ba 2f       	mov	r27, r26
    16f0:	a0 2d       	mov	r26, r0
    16f2:	0b 01       	movw	r0, r22
    16f4:	b9 01       	movw	r22, r18
    16f6:	90 01       	movw	r18, r0
    16f8:	0c 01       	movw	r0, r24
    16fa:	ca 01       	movw	r24, r20
    16fc:	a0 01       	movw	r20, r0
    16fe:	11 24       	eor	r1, r1
    1700:	ff 27       	eor	r31, r31
    1702:	59 1b       	sub	r21, r25
    1704:	99 f0       	breq	.+38     	; 0x172c <__addsf3x+0x60>
    1706:	59 3f       	cpi	r21, 0xF9	; 249
    1708:	50 f4       	brcc	.+20     	; 0x171e <__addsf3x+0x52>
    170a:	50 3e       	cpi	r21, 0xE0	; 224
    170c:	68 f1       	brcs	.+90     	; 0x1768 <__addsf3x+0x9c>
    170e:	1a 16       	cp	r1, r26
    1710:	f0 40       	sbci	r31, 0x00	; 0
    1712:	a2 2f       	mov	r26, r18
    1714:	23 2f       	mov	r18, r19
    1716:	34 2f       	mov	r19, r20
    1718:	44 27       	eor	r20, r20
    171a:	58 5f       	subi	r21, 0xF8	; 248
    171c:	f3 cf       	rjmp	.-26     	; 0x1704 <__addsf3x+0x38>
    171e:	46 95       	lsr	r20
    1720:	37 95       	ror	r19
    1722:	27 95       	ror	r18
    1724:	a7 95       	ror	r26
    1726:	f0 40       	sbci	r31, 0x00	; 0
    1728:	53 95       	inc	r21
    172a:	c9 f7       	brne	.-14     	; 0x171e <__addsf3x+0x52>
    172c:	7e f4       	brtc	.+30     	; 0x174c <__addsf3x+0x80>
    172e:	1f 16       	cp	r1, r31
    1730:	ba 0b       	sbc	r27, r26
    1732:	62 0b       	sbc	r22, r18
    1734:	73 0b       	sbc	r23, r19
    1736:	84 0b       	sbc	r24, r20
    1738:	ba f0       	brmi	.+46     	; 0x1768 <__addsf3x+0x9c>
    173a:	91 50       	subi	r25, 0x01	; 1
    173c:	a1 f0       	breq	.+40     	; 0x1766 <__addsf3x+0x9a>
    173e:	ff 0f       	add	r31, r31
    1740:	bb 1f       	adc	r27, r27
    1742:	66 1f       	adc	r22, r22
    1744:	77 1f       	adc	r23, r23
    1746:	88 1f       	adc	r24, r24
    1748:	c2 f7       	brpl	.-16     	; 0x173a <__addsf3x+0x6e>
    174a:	0e c0       	rjmp	.+28     	; 0x1768 <__addsf3x+0x9c>
    174c:	ba 0f       	add	r27, r26
    174e:	62 1f       	adc	r22, r18
    1750:	73 1f       	adc	r23, r19
    1752:	84 1f       	adc	r24, r20
    1754:	48 f4       	brcc	.+18     	; 0x1768 <__addsf3x+0x9c>
    1756:	87 95       	ror	r24
    1758:	77 95       	ror	r23
    175a:	67 95       	ror	r22
    175c:	b7 95       	ror	r27
    175e:	f7 95       	ror	r31
    1760:	9e 3f       	cpi	r25, 0xFE	; 254
    1762:	08 f0       	brcs	.+2      	; 0x1766 <__addsf3x+0x9a>
    1764:	b0 cf       	rjmp	.-160    	; 0x16c6 <__addsf3+0x28>
    1766:	93 95       	inc	r25
    1768:	88 0f       	add	r24, r24
    176a:	08 f0       	brcs	.+2      	; 0x176e <__addsf3x+0xa2>
    176c:	99 27       	eor	r25, r25
    176e:	ee 0f       	add	r30, r30
    1770:	97 95       	ror	r25
    1772:	87 95       	ror	r24
    1774:	08 95       	ret

00001776 <__fixunssfsi>:
    1776:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__fp_splitA>
    177a:	88 f0       	brcs	.+34     	; 0x179e <__fixunssfsi+0x28>
    177c:	9f 57       	subi	r25, 0x7F	; 127
    177e:	98 f0       	brcs	.+38     	; 0x17a6 <__fixunssfsi+0x30>
    1780:	b9 2f       	mov	r27, r25
    1782:	99 27       	eor	r25, r25
    1784:	b7 51       	subi	r27, 0x17	; 23
    1786:	b0 f0       	brcs	.+44     	; 0x17b4 <__fixunssfsi+0x3e>
    1788:	e1 f0       	breq	.+56     	; 0x17c2 <__fixunssfsi+0x4c>
    178a:	66 0f       	add	r22, r22
    178c:	77 1f       	adc	r23, r23
    178e:	88 1f       	adc	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	1a f0       	brmi	.+6      	; 0x179a <__fixunssfsi+0x24>
    1794:	ba 95       	dec	r27
    1796:	c9 f7       	brne	.-14     	; 0x178a <__fixunssfsi+0x14>
    1798:	14 c0       	rjmp	.+40     	; 0x17c2 <__fixunssfsi+0x4c>
    179a:	b1 30       	cpi	r27, 0x01	; 1
    179c:	91 f0       	breq	.+36     	; 0x17c2 <__fixunssfsi+0x4c>
    179e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__fp_zero>
    17a2:	b1 e0       	ldi	r27, 0x01	; 1
    17a4:	08 95       	ret
    17a6:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__fp_zero>
    17aa:	67 2f       	mov	r22, r23
    17ac:	78 2f       	mov	r23, r24
    17ae:	88 27       	eor	r24, r24
    17b0:	b8 5f       	subi	r27, 0xF8	; 248
    17b2:	39 f0       	breq	.+14     	; 0x17c2 <__fixunssfsi+0x4c>
    17b4:	b9 3f       	cpi	r27, 0xF9	; 249
    17b6:	cc f3       	brlt	.-14     	; 0x17aa <__fixunssfsi+0x34>
    17b8:	86 95       	lsr	r24
    17ba:	77 95       	ror	r23
    17bc:	67 95       	ror	r22
    17be:	b3 95       	inc	r27
    17c0:	d9 f7       	brne	.-10     	; 0x17b8 <__fixunssfsi+0x42>
    17c2:	3e f4       	brtc	.+14     	; 0x17d2 <__fixunssfsi+0x5c>
    17c4:	90 95       	com	r25
    17c6:	80 95       	com	r24
    17c8:	70 95       	com	r23
    17ca:	61 95       	neg	r22
    17cc:	7f 4f       	sbci	r23, 0xFF	; 255
    17ce:	8f 4f       	sbci	r24, 0xFF	; 255
    17d0:	9f 4f       	sbci	r25, 0xFF	; 255
    17d2:	08 95       	ret

000017d4 <__floatunsisf>:
    17d4:	e8 94       	clt
    17d6:	09 c0       	rjmp	.+18     	; 0x17ea <__floatsisf+0x12>

000017d8 <__floatsisf>:
    17d8:	97 fb       	bst	r25, 7
    17da:	3e f4       	brtc	.+14     	; 0x17ea <__floatsisf+0x12>
    17dc:	90 95       	com	r25
    17de:	80 95       	com	r24
    17e0:	70 95       	com	r23
    17e2:	61 95       	neg	r22
    17e4:	7f 4f       	sbci	r23, 0xFF	; 255
    17e6:	8f 4f       	sbci	r24, 0xFF	; 255
    17e8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ea:	99 23       	and	r25, r25
    17ec:	a9 f0       	breq	.+42     	; 0x1818 <__floatsisf+0x40>
    17ee:	f9 2f       	mov	r31, r25
    17f0:	96 e9       	ldi	r25, 0x96	; 150
    17f2:	bb 27       	eor	r27, r27
    17f4:	93 95       	inc	r25
    17f6:	f6 95       	lsr	r31
    17f8:	87 95       	ror	r24
    17fa:	77 95       	ror	r23
    17fc:	67 95       	ror	r22
    17fe:	b7 95       	ror	r27
    1800:	f1 11       	cpse	r31, r1
    1802:	f8 cf       	rjmp	.-16     	; 0x17f4 <__floatsisf+0x1c>
    1804:	fa f4       	brpl	.+62     	; 0x1844 <__floatsisf+0x6c>
    1806:	bb 0f       	add	r27, r27
    1808:	11 f4       	brne	.+4      	; 0x180e <__floatsisf+0x36>
    180a:	60 ff       	sbrs	r22, 0
    180c:	1b c0       	rjmp	.+54     	; 0x1844 <__floatsisf+0x6c>
    180e:	6f 5f       	subi	r22, 0xFF	; 255
    1810:	7f 4f       	sbci	r23, 0xFF	; 255
    1812:	8f 4f       	sbci	r24, 0xFF	; 255
    1814:	9f 4f       	sbci	r25, 0xFF	; 255
    1816:	16 c0       	rjmp	.+44     	; 0x1844 <__floatsisf+0x6c>
    1818:	88 23       	and	r24, r24
    181a:	11 f0       	breq	.+4      	; 0x1820 <__floatsisf+0x48>
    181c:	96 e9       	ldi	r25, 0x96	; 150
    181e:	11 c0       	rjmp	.+34     	; 0x1842 <__floatsisf+0x6a>
    1820:	77 23       	and	r23, r23
    1822:	21 f0       	breq	.+8      	; 0x182c <__floatsisf+0x54>
    1824:	9e e8       	ldi	r25, 0x8E	; 142
    1826:	87 2f       	mov	r24, r23
    1828:	76 2f       	mov	r23, r22
    182a:	05 c0       	rjmp	.+10     	; 0x1836 <__floatsisf+0x5e>
    182c:	66 23       	and	r22, r22
    182e:	71 f0       	breq	.+28     	; 0x184c <__floatsisf+0x74>
    1830:	96 e8       	ldi	r25, 0x86	; 134
    1832:	86 2f       	mov	r24, r22
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	2a f0       	brmi	.+10     	; 0x1844 <__floatsisf+0x6c>
    183a:	9a 95       	dec	r25
    183c:	66 0f       	add	r22, r22
    183e:	77 1f       	adc	r23, r23
    1840:	88 1f       	adc	r24, r24
    1842:	da f7       	brpl	.-10     	; 0x183a <__floatsisf+0x62>
    1844:	88 0f       	add	r24, r24
    1846:	96 95       	lsr	r25
    1848:	87 95       	ror	r24
    184a:	97 f9       	bld	r25, 7
    184c:	08 95       	ret

0000184e <__fp_inf>:
    184e:	97 f9       	bld	r25, 7
    1850:	9f 67       	ori	r25, 0x7F	; 127
    1852:	80 e8       	ldi	r24, 0x80	; 128
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	08 95       	ret

0000185a <__fp_nan>:
    185a:	9f ef       	ldi	r25, 0xFF	; 255
    185c:	80 ec       	ldi	r24, 0xC0	; 192
    185e:	08 95       	ret

00001860 <__fp_pscA>:
    1860:	00 24       	eor	r0, r0
    1862:	0a 94       	dec	r0
    1864:	16 16       	cp	r1, r22
    1866:	17 06       	cpc	r1, r23
    1868:	18 06       	cpc	r1, r24
    186a:	09 06       	cpc	r0, r25
    186c:	08 95       	ret

0000186e <__fp_pscB>:
    186e:	00 24       	eor	r0, r0
    1870:	0a 94       	dec	r0
    1872:	12 16       	cp	r1, r18
    1874:	13 06       	cpc	r1, r19
    1876:	14 06       	cpc	r1, r20
    1878:	05 06       	cpc	r0, r21
    187a:	08 95       	ret

0000187c <__fp_round>:
    187c:	09 2e       	mov	r0, r25
    187e:	03 94       	inc	r0
    1880:	00 0c       	add	r0, r0
    1882:	11 f4       	brne	.+4      	; 0x1888 <__fp_round+0xc>
    1884:	88 23       	and	r24, r24
    1886:	52 f0       	brmi	.+20     	; 0x189c <__fp_round+0x20>
    1888:	bb 0f       	add	r27, r27
    188a:	40 f4       	brcc	.+16     	; 0x189c <__fp_round+0x20>
    188c:	bf 2b       	or	r27, r31
    188e:	11 f4       	brne	.+4      	; 0x1894 <__fp_round+0x18>
    1890:	60 ff       	sbrs	r22, 0
    1892:	04 c0       	rjmp	.+8      	; 0x189c <__fp_round+0x20>
    1894:	6f 5f       	subi	r22, 0xFF	; 255
    1896:	7f 4f       	sbci	r23, 0xFF	; 255
    1898:	8f 4f       	sbci	r24, 0xFF	; 255
    189a:	9f 4f       	sbci	r25, 0xFF	; 255
    189c:	08 95       	ret

0000189e <__fp_split3>:
    189e:	57 fd       	sbrc	r21, 7
    18a0:	90 58       	subi	r25, 0x80	; 128
    18a2:	44 0f       	add	r20, r20
    18a4:	55 1f       	adc	r21, r21
    18a6:	59 f0       	breq	.+22     	; 0x18be <__fp_splitA+0x10>
    18a8:	5f 3f       	cpi	r21, 0xFF	; 255
    18aa:	71 f0       	breq	.+28     	; 0x18c8 <__fp_splitA+0x1a>
    18ac:	47 95       	ror	r20

000018ae <__fp_splitA>:
    18ae:	88 0f       	add	r24, r24
    18b0:	97 fb       	bst	r25, 7
    18b2:	99 1f       	adc	r25, r25
    18b4:	61 f0       	breq	.+24     	; 0x18ce <__fp_splitA+0x20>
    18b6:	9f 3f       	cpi	r25, 0xFF	; 255
    18b8:	79 f0       	breq	.+30     	; 0x18d8 <__fp_splitA+0x2a>
    18ba:	87 95       	ror	r24
    18bc:	08 95       	ret
    18be:	12 16       	cp	r1, r18
    18c0:	13 06       	cpc	r1, r19
    18c2:	14 06       	cpc	r1, r20
    18c4:	55 1f       	adc	r21, r21
    18c6:	f2 cf       	rjmp	.-28     	; 0x18ac <__fp_split3+0xe>
    18c8:	46 95       	lsr	r20
    18ca:	f1 df       	rcall	.-30     	; 0x18ae <__fp_splitA>
    18cc:	08 c0       	rjmp	.+16     	; 0x18de <__fp_splitA+0x30>
    18ce:	16 16       	cp	r1, r22
    18d0:	17 06       	cpc	r1, r23
    18d2:	18 06       	cpc	r1, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	f1 cf       	rjmp	.-30     	; 0x18ba <__fp_splitA+0xc>
    18d8:	86 95       	lsr	r24
    18da:	71 05       	cpc	r23, r1
    18dc:	61 05       	cpc	r22, r1
    18de:	08 94       	sec
    18e0:	08 95       	ret

000018e2 <__fp_zero>:
    18e2:	e8 94       	clt

000018e4 <__fp_szero>:
    18e4:	bb 27       	eor	r27, r27
    18e6:	66 27       	eor	r22, r22
    18e8:	77 27       	eor	r23, r23
    18ea:	cb 01       	movw	r24, r22
    18ec:	97 f9       	bld	r25, 7
    18ee:	08 95       	ret

000018f0 <__mulsf3>:
    18f0:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__mulsf3x>
    18f4:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <__fp_round>
    18f8:	0e 94 30 0c 	call	0x1860	; 0x1860 <__fp_pscA>
    18fc:	38 f0       	brcs	.+14     	; 0x190c <__mulsf3+0x1c>
    18fe:	0e 94 37 0c 	call	0x186e	; 0x186e <__fp_pscB>
    1902:	20 f0       	brcs	.+8      	; 0x190c <__mulsf3+0x1c>
    1904:	95 23       	and	r25, r21
    1906:	11 f0       	breq	.+4      	; 0x190c <__mulsf3+0x1c>
    1908:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__fp_inf>
    190c:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_nan>
    1910:	11 24       	eor	r1, r1
    1912:	0c 94 72 0c 	jmp	0x18e4	; 0x18e4 <__fp_szero>

00001916 <__mulsf3x>:
    1916:	0e 94 4f 0c 	call	0x189e	; 0x189e <__fp_split3>
    191a:	70 f3       	brcs	.-36     	; 0x18f8 <__mulsf3+0x8>

0000191c <__mulsf3_pse>:
    191c:	95 9f       	mul	r25, r21
    191e:	c1 f3       	breq	.-16     	; 0x1910 <__mulsf3+0x20>
    1920:	95 0f       	add	r25, r21
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	55 1f       	adc	r21, r21
    1926:	62 9f       	mul	r22, r18
    1928:	f0 01       	movw	r30, r0
    192a:	72 9f       	mul	r23, r18
    192c:	bb 27       	eor	r27, r27
    192e:	f0 0d       	add	r31, r0
    1930:	b1 1d       	adc	r27, r1
    1932:	63 9f       	mul	r22, r19
    1934:	aa 27       	eor	r26, r26
    1936:	f0 0d       	add	r31, r0
    1938:	b1 1d       	adc	r27, r1
    193a:	aa 1f       	adc	r26, r26
    193c:	64 9f       	mul	r22, r20
    193e:	66 27       	eor	r22, r22
    1940:	b0 0d       	add	r27, r0
    1942:	a1 1d       	adc	r26, r1
    1944:	66 1f       	adc	r22, r22
    1946:	82 9f       	mul	r24, r18
    1948:	22 27       	eor	r18, r18
    194a:	b0 0d       	add	r27, r0
    194c:	a1 1d       	adc	r26, r1
    194e:	62 1f       	adc	r22, r18
    1950:	73 9f       	mul	r23, r19
    1952:	b0 0d       	add	r27, r0
    1954:	a1 1d       	adc	r26, r1
    1956:	62 1f       	adc	r22, r18
    1958:	83 9f       	mul	r24, r19
    195a:	a0 0d       	add	r26, r0
    195c:	61 1d       	adc	r22, r1
    195e:	22 1f       	adc	r18, r18
    1960:	74 9f       	mul	r23, r20
    1962:	33 27       	eor	r19, r19
    1964:	a0 0d       	add	r26, r0
    1966:	61 1d       	adc	r22, r1
    1968:	23 1f       	adc	r18, r19
    196a:	84 9f       	mul	r24, r20
    196c:	60 0d       	add	r22, r0
    196e:	21 1d       	adc	r18, r1
    1970:	82 2f       	mov	r24, r18
    1972:	76 2f       	mov	r23, r22
    1974:	6a 2f       	mov	r22, r26
    1976:	11 24       	eor	r1, r1
    1978:	9f 57       	subi	r25, 0x7F	; 127
    197a:	50 40       	sbci	r21, 0x00	; 0
    197c:	9a f0       	brmi	.+38     	; 0x19a4 <__mulsf3_pse+0x88>
    197e:	f1 f0       	breq	.+60     	; 0x19bc <__mulsf3_pse+0xa0>
    1980:	88 23       	and	r24, r24
    1982:	4a f0       	brmi	.+18     	; 0x1996 <__mulsf3_pse+0x7a>
    1984:	ee 0f       	add	r30, r30
    1986:	ff 1f       	adc	r31, r31
    1988:	bb 1f       	adc	r27, r27
    198a:	66 1f       	adc	r22, r22
    198c:	77 1f       	adc	r23, r23
    198e:	88 1f       	adc	r24, r24
    1990:	91 50       	subi	r25, 0x01	; 1
    1992:	50 40       	sbci	r21, 0x00	; 0
    1994:	a9 f7       	brne	.-22     	; 0x1980 <__mulsf3_pse+0x64>
    1996:	9e 3f       	cpi	r25, 0xFE	; 254
    1998:	51 05       	cpc	r21, r1
    199a:	80 f0       	brcs	.+32     	; 0x19bc <__mulsf3_pse+0xa0>
    199c:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__fp_inf>
    19a0:	0c 94 72 0c 	jmp	0x18e4	; 0x18e4 <__fp_szero>
    19a4:	5f 3f       	cpi	r21, 0xFF	; 255
    19a6:	e4 f3       	brlt	.-8      	; 0x19a0 <__mulsf3_pse+0x84>
    19a8:	98 3e       	cpi	r25, 0xE8	; 232
    19aa:	d4 f3       	brlt	.-12     	; 0x19a0 <__mulsf3_pse+0x84>
    19ac:	86 95       	lsr	r24
    19ae:	77 95       	ror	r23
    19b0:	67 95       	ror	r22
    19b2:	b7 95       	ror	r27
    19b4:	f7 95       	ror	r31
    19b6:	e7 95       	ror	r30
    19b8:	9f 5f       	subi	r25, 0xFF	; 255
    19ba:	c1 f7       	brne	.-16     	; 0x19ac <__mulsf3_pse+0x90>
    19bc:	fe 2b       	or	r31, r30
    19be:	88 0f       	add	r24, r24
    19c0:	91 1d       	adc	r25, r1
    19c2:	96 95       	lsr	r25
    19c4:	87 95       	ror	r24
    19c6:	97 f9       	bld	r25, 7
    19c8:	08 95       	ret

000019ca <__udivmodsi4>:
    19ca:	a1 e2       	ldi	r26, 0x21	; 33
    19cc:	1a 2e       	mov	r1, r26
    19ce:	aa 1b       	sub	r26, r26
    19d0:	bb 1b       	sub	r27, r27
    19d2:	fd 01       	movw	r30, r26
    19d4:	0d c0       	rjmp	.+26     	; 0x19f0 <__udivmodsi4_ep>

000019d6 <__udivmodsi4_loop>:
    19d6:	aa 1f       	adc	r26, r26
    19d8:	bb 1f       	adc	r27, r27
    19da:	ee 1f       	adc	r30, r30
    19dc:	ff 1f       	adc	r31, r31
    19de:	a2 17       	cp	r26, r18
    19e0:	b3 07       	cpc	r27, r19
    19e2:	e4 07       	cpc	r30, r20
    19e4:	f5 07       	cpc	r31, r21
    19e6:	20 f0       	brcs	.+8      	; 0x19f0 <__udivmodsi4_ep>
    19e8:	a2 1b       	sub	r26, r18
    19ea:	b3 0b       	sbc	r27, r19
    19ec:	e4 0b       	sbc	r30, r20
    19ee:	f5 0b       	sbc	r31, r21

000019f0 <__udivmodsi4_ep>:
    19f0:	66 1f       	adc	r22, r22
    19f2:	77 1f       	adc	r23, r23
    19f4:	88 1f       	adc	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	1a 94       	dec	r1
    19fa:	69 f7       	brne	.-38     	; 0x19d6 <__udivmodsi4_loop>
    19fc:	60 95       	com	r22
    19fe:	70 95       	com	r23
    1a00:	80 95       	com	r24
    1a02:	90 95       	com	r25
    1a04:	9b 01       	movw	r18, r22
    1a06:	ac 01       	movw	r20, r24
    1a08:	bd 01       	movw	r22, r26
    1a0a:	cf 01       	movw	r24, r30
    1a0c:	08 95       	ret

00001a0e <__adddi3_s8>:
    1a0e:	00 24       	eor	r0, r0
    1a10:	a7 fd       	sbrc	r26, 7
    1a12:	00 94       	com	r0
    1a14:	2a 0f       	add	r18, r26
    1a16:	30 1d       	adc	r19, r0
    1a18:	40 1d       	adc	r20, r0
    1a1a:	50 1d       	adc	r21, r0
    1a1c:	60 1d       	adc	r22, r0
    1a1e:	70 1d       	adc	r23, r0
    1a20:	80 1d       	adc	r24, r0
    1a22:	90 1d       	adc	r25, r0
    1a24:	08 95       	ret

00001a26 <memcpy>:
    1a26:	fb 01       	movw	r30, r22
    1a28:	dc 01       	movw	r26, r24
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <memcpy+0xa>
    1a2c:	01 90       	ld	r0, Z+
    1a2e:	0d 92       	st	X+, r0
    1a30:	41 50       	subi	r20, 0x01	; 1
    1a32:	50 40       	sbci	r21, 0x00	; 0
    1a34:	d8 f7       	brcc	.-10     	; 0x1a2c <memcpy+0x6>
    1a36:	08 95       	ret

00001a38 <_exit>:
    1a38:	f8 94       	cli

00001a3a <__stop_program>:
    1a3a:	ff cf       	rjmp	.-2      	; 0x1a3a <__stop_program>
